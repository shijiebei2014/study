/*    */ package com.remedy.arsys.goat.service;
/*    */ 
/*    */ import com.bmc.arsys.api.ARException;
/*    */ import com.bmc.arsys.api.DataType;
/*    */ import com.bmc.arsys.api.ProcessResult;
/*    */ import com.bmc.arsys.api.Value;
/*    */ import com.remedy.arsys.config.Configuration;
/*    */ import com.remedy.arsys.goat.ActiveLinkCollector;
/*    */ import com.remedy.arsys.goat.CachedFieldMap;
/*    */ import com.remedy.arsys.goat.Form;
/*    */ import com.remedy.arsys.goat.Form.ViewInfo;
/*    */ import com.remedy.arsys.goat.FormContext;
/*    */ import com.remedy.arsys.goat.GoatException;
/*    */ import com.remedy.arsys.goat.GoatImage;
/*    */ import com.remedy.arsys.goat.GoatServerMessage;
/*    */ import com.remedy.arsys.goat.Keyword;
/*    */ import com.remedy.arsys.goat.LocaleUtil;
/*    */ import com.remedy.arsys.goat.OutputNotes;
/*    */ import com.remedy.arsys.goat.StyleSheetEmitter;
/*    */ import com.remedy.arsys.goat.TemplateCollector;
/*    */ import com.remedy.arsys.goat.TextDirStyleContext;
/*    */ import com.remedy.arsys.goat.UserDataEmitter;
/*    */ import com.remedy.arsys.goat.aspects.IFieldGraphServiceCacheAspect;
/*    */ import com.remedy.arsys.goat.aspects.skins.ViewInfoAspect;
/*    */ import com.remedy.arsys.goat.field.EnumField;
/*    */ import com.remedy.arsys.goat.field.FieldGraph;
/*    */ import com.remedy.arsys.goat.field.FieldGraph.Node;
/*    */ import com.remedy.arsys.goat.field.GoatField;
/*    */ import com.remedy.arsys.goat.field.ToolbarBuilder;
/*    */ import com.remedy.arsys.goat.field.emit.html.EnumFieldEmitter;
/*    */ import com.remedy.arsys.goat.fieldgraph.visitor.html.DummyFieldGraphVistorAccess;
/*    */ import com.remedy.arsys.goat.fieldgraph.visitor.html.HTMLFieldGraphVisitor;
/*    */ import com.remedy.arsys.goat.fieldgraph.visitor.html.HTMLFloatFieldGraphVisitorAccess;
/*    */ import com.remedy.arsys.goat.fieldgraph.visitor.html.HTMLHelpFieldGraphVisitor;
/*    */ import com.remedy.arsys.goat.fieldgraph.visitor.html.HTMLNonFloatFieldGraphVisitorAccess;
/*    */ import com.remedy.arsys.goat.fieldgraph.visitor.html.JSDefaultsFieldGraphVisitor;
/*    */ import com.remedy.arsys.goat.fieldgraph.visitor.html.JSDisplayOnlyFieldGraphVisitor;
/*    */ import com.remedy.arsys.goat.fieldgraph.visitor.html.JSDragDropFieldGraphVisitor;
/*    */ import com.remedy.arsys.goat.fieldgraph.visitor.html.JSFieldGraphVisitor;
/*    */ import com.remedy.arsys.goat.fieldgraph.visitor.html.JSGlobalFieldGraphVisitor;
/*    */ import com.remedy.arsys.goat.fieldgraph.visitor.html.JSSystemFieldGraphVisitor;
/*    */ import com.remedy.arsys.goat.intf.field.emit.IEmitterFactory;
/*    */ import com.remedy.arsys.goat.intf.service.IFieldGraphService;
/*    */ import com.remedy.arsys.goat.intf.service.IRequestService;
/*    */ import com.remedy.arsys.goat.intf.service.ISkinDefinitionService;
/*    */ import com.remedy.arsys.goat.menu.Menu;
/*    */ import com.remedy.arsys.goat.skins.SkinDefinitionList;
/*    */ import com.remedy.arsys.goat.skins.SkinDefinitionMap;
/*    */ import com.remedy.arsys.goat.skins.SkinHelper;
/*    */ import com.remedy.arsys.goat.skins.SkinPropertyMapper;
/*    */ import com.remedy.arsys.log.Log;
/*    */ import com.remedy.arsys.share.HTMLWriter;
/*    */ import com.remedy.arsys.share.JSWriter;
/*    */ import com.remedy.arsys.share.MessageTranslation;
/*    */ import com.remedy.arsys.share.ServerInfo;
/*    */ import com.remedy.arsys.share.ServiceLocator;
/*    */ import com.remedy.arsys.share.UrlHelper;
/*    */ import com.remedy.arsys.stubs.ServerLogin;
/*    */ import com.remedy.arsys.stubs.SessionData;
/*    */ import com.remedy.arsys.support.BrowserType;
/*    */ import com.remedy.arsys.support.SchemaKeyFactory;
/*    */ import java.io.PrintWriter;
/*    */ import java.io.UnsupportedEncodingException;
/*    */ import java.net.URLEncoder;
/*    */ import java.util.Collection;
/*    */ import java.util.Iterator;
/*    */ import java.util.LinkedHashMap;
/*    */ import java.util.Map;
/*    */ import java.util.Map.Entry;
/*    */ import java.util.Set;
/*    */ import java.util.SortedMap;
/*    */ import java.util.TreeMap;
/*    */ import java.util.regex.Matcher;
/*    */ import java.util.regex.Pattern;
/*    */ 
/*    */ public class DHTMLBuilder
/*    */ {
/*  1 */   private static int REPORT_SELECTION_FORM = 2010007; private static int AR_REPORT_CONSOLE_FORM = 93250; private static int AR_REPORT_PREVIEW_FORM = 93604; private static final int[] REPORT_SCHEMA_KEY_IDS = { REPORT_SELECTION_FORM }; private static final int[] AR_REPORT_CONSOLE_SCHEMA_KEY_IDS = { AR_REPORT_CONSOLE_FORM }; private static final int[] AR_REPORT_PREVIEW_SCHEMA_KEY_IDS = { AR_REPORT_PREVIEW_FORM };
/*    */   private static final String WAIT_CURSOR_HTML_START = "<div class='loadingContainer'><img class='loadingImage' src='";
/*    */   private static final String WAIT_CURSOR_HTML_END = "images/Progress_NonModal-circle.gif'/><span class='loadingText'>";
/*  1 */   public static boolean MWorkflowProfiling = Configuration.getInstance().getWorkflowProfiling(); private static final StyleSheetEmitter MARSystemCSS = new StyleSheetEmitter("ARSystem"); private static final StyleSheetEmitter MARSystemAccCSS = new StyleSheetEmitter("ARSystemAcc", false, false); private static final StyleSheetEmitter MARSystemRTLCSS = new StyleSheetEmitter("ARSystemRTL", false, false); private static final StyleSheetEmitter MARSystemHelpCSS = new StyleSheetEmitter("ARSystemHelp"); private static final StyleSheetEmitter MARSystemHelpRTLCSS = new StyleSheetEmitter("ARSystemHelpRTL");
/*    */   private final FieldGraph fieldgraph;
/*    */   private final IRequestService requestService;
/*    */   private final IFieldGraphService fieldgraphService;
/*    */   private final IEmitterFactory emitterFactory;
/*    */   private ISkinDefinitionService skinService;
/*  1 */   private static Log MLog = Log.get(10); private static final Pattern KeywordP = Pattern.compile("\\$\\\\[A-Z]+\\$");
/*    */ 
/*  1 */   public DHTMLBuilder(IRequestService paramIRequestService, IFieldGraphService paramIFieldGraphService, FieldGraph paramFieldGraph, ISkinDefinitionService paramISkinDefinitionService) { this.requestService = paramIRequestService; this.fieldgraphService = paramIFieldGraphService; this.fieldgraph = paramFieldGraph; this.skinService = paramISkinDefinitionService; this.emitterFactory = ((IEmitterFactory)ServiceLocator.getInstance().getService("emitterFactory")); } 
/*  1 */   public String genHTML(OutputNotes arg0, GoatServerMessage[] arg1) throws GoatException { Form.ViewInfo localViewInfo = this.fieldgraph.getViewInfo(); FormContext localFormContext = FormContext.get(); HTMLWriter localHTMLWriter1 = new HTMLWriter(new StringBuilder(262144)); String str1 = this.fieldgraph.getForm().getServerName(); String str2 = this.fieldgraph.getForm().getName(); if (Configuration.getInstance().getEmitCompatMode()) localHTMLWriter1.append("<!-- Copyright 2011, BMC Software, Inc. All Rights Reserved. -->"); localHTMLWriter1.append("<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\"\n"); localHTMLWriter1.append("\"http://www.w3.org/TR/html4/strict.dtd\">\n"); if (localViewInfo.isRTL()) { TextDirStyleContext.set(TextDirStyleContext.getRTLStyle()); localHTMLWriter1.openWholeTag("html dir=rtl"); } else { TextDirStyleContext.set(TextDirStyleContext.getLTRStyle()); localHTMLWriter1.openWholeTag("html"); } localHTMLWriter1.openWholeTag("head"); localHTMLWriter1.openWholeTag("title").closeTag("title"); String str3 = ""; Object localObject1 = ""; Object localObject2 = "";
/*    */     try { String str4 = SchemaKeyFactory.getInstance().getSchemaKey(ServerLogin.getAdmin(str1), REPORT_SCHEMA_KEY_IDS); str6 = str4 == null ? "" : str4; str3 = URLEncoder.encode(str6, "UTF-8"); str4 = SchemaKeyFactory.getInstance().getSchemaKey(ServerLogin.getAdmin(str1), AR_REPORT_CONSOLE_SCHEMA_KEY_IDS); localObject1 = str4 == null ? "" : str4; str4 = SchemaKeyFactory.getInstance().getSchemaKey(ServerLogin.getAdmin(str1), AR_REPORT_PREVIEW_SCHEMA_KEY_IDS); localObject2 = str4 == null ? "" : str4; } catch (ARException localARException1) { str3 = ""; } catch (UnsupportedEncodingException localUnsupportedEncodingException2) { if (!$assertionsDisabled) throw new AssertionError();  } if ((str2.equals(localObject1)) || (str2.equals(localObject2))) localHTMLWriter1.append("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=8\">\n"); else if (Configuration.getInstance().getEmitCompatMode()) localHTMLWriter1.append("<meta http-equiv=\"X-UA-Compatible\" content=\"IE=Edge\">\n"); localHTMLWriter1.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n"); localHTMLWriter1.append("<link rel=\"SHORTCUT ICON\" href=\"" + localFormContext.getResourceURL() + "images/favicon.ico\">"); localHTMLWriter1.openTag("script").attr("type", "text/javascript").attr("src", localFormContext.getJSURL() + "8.1.00 201301251157" + "/" + "bootstrap.js").endTag(false).closeTag("script"); localHTMLWriter1.openTag("script").attr("type", "text/javascript").endTag(false); if (MWorkflowProfiling) localHTMLWriter1.append("var start=new Date().getTime();"); localHTMLWriter1.append("var loaded=0;"); localHTMLWriter1.append("var mainWinID=0;"); localHTMLWriter1.append("function ScriptLoaded() {"); localHTMLWriter1.append("++loaded;if(loaded==1)ARSystemInit(mainWinID,\""); localHTMLWriter1.append(str1); localHTMLWriter1.append("\",\""); localHTMLWriter1.append(str2); localHTMLWriter1.append("\",\""); localHTMLWriter1.append(localViewInfo.getLabel()); localHTMLWriter1.append("\",null,null,null);"); localHTMLWriter1.append("var opnWnd = window.opener; if (opnWnd){opnWnd.isFrmLoaded=true};}"); localHTMLWriter1.append("var RelContextPath='").append(localFormContext.getRelativeContextURL()).append("',"); localHTMLWriter1.append("AbsContextPath="); if (localFormContext.getAbsoluteContextURL() == null) localHTMLWriter1.append("null;"); else localHTMLWriter1.append("'").append(localFormContext.getAbsoluteContextURL()).append("';"); localHTMLWriter1.closeTag("script"); MARSystemCSS.emit(localHTMLWriter1, str1); if (localFormContext.IsVoiceAccessibleUser()) MARSystemAccCSS.emit(localHTMLWriter1, str1); if (localViewInfo.isRTL()) MARSystemRTLCSS.emit(localHTMLWriter1, str1); localHTMLWriter1.openTag("link").attr("rel", "stylesheet").attr("type", "text/css").attr("href", localFormContext.getJSURL() + "8.1.00 201301251157" + "/YUI/assets/skins/sam/resize.css").endTag(true); localHTMLWriter1.openTag("link").attr("rel", "stylesheet").attr("type", "text/css").attr("href", localFormContext.getJSURL() + "8.1.00 201301251157" + "/JQuery/jquery.treeTable.css").endTag(true); localHTMLWriter1.openTag("script").attr("type", "text/javascript").attr("src", localFormContext.getJSURL() + "8.1.00 201301251157" + "/" + LocaleUtil.getLocalizedMessagesScript(localFormContext.getJSPath())).attr("defer").endTag(false).closeTag("script"); localHTMLWriter1.openTag("script").attr("type", "text/javascript").endTag(false).append("function DVFsf(){return\"\\x3cHTML\\x3e\\x3c/HTML\\x3e\";}function DVFol(){}").closeTag("script"); String str5 = buildServerMessages(arg1); if ((str5 != null) && (str5.length() != 0)) localHTMLWriter1.openTag("script").attr("type", "text/javascript").endTag(false).append("alert('" + str5 + "');").closeTag("script"); String str6 = null; String str7 = null; str6 = JSWriter.genDynEmbedRsrcString("script", true, false, new String[] { "type", "text/javascript", "defer", null }, "src", localFormContext.getJSURL(), "YahooRTF.js"); if (MWorkflowProfiling) { str8 = JSWriter.genDynEmbedRsrcString("script", true, false, new String[] { "type", "text/javascript" }, "src", localFormContext.getJSURL(), "Profile.js"); localHTMLWriter1.openTag("script").attr("type", "text/javascript").endTag(false); localHTMLWriter1.append("document.write(\"" + str8 + "\");"); localHTMLWriter1.closeTag("script"); } if (localFormContext.IsVoiceAccessibleUser()) str7 = JSWriter.genDynEmbedRsrcString("script", true, false, new String[] { "type", "text/javascript", "defer", null }, "src", localFormContext.getJSURL(), "ClientCoreAcc.js"); else if (MWorkflowProfiling) str7 = JSWriter.genDynEmbedRsrcString("script", true, false, new String[] { "type", "text/javascript", "defer", null }, "src", localFormContext.getJSURL(), "ClientCoreProf.js"); else if (localViewInfo.isRTL()) str7 = JSWriter.genDynEmbedRsrcString("script", true, false, new String[] { "type", "text/javascript", "defer", null }, "src", localFormContext.getJSURL(), "ClientCoreRTL.js"); else str7 = JSWriter.genDynEmbedRsrcString("script", true, false, new String[] { "type", "text/javascript", "defer", null }, "src", localFormContext.getJSURL(), "ClientCore.js"); localHTMLWriter1.openTag("script").attr("type", "text/javascript").endTag(false); localHTMLWriter1.append("document.write(\"" + str6 + str7 + "\");"); localHTMLWriter1.closeTag("script"); localHTMLWriter1.openTag("script").attr("type", "text/javascript").attr("src", localFormContext.getJSURL() + "8.1.00 201301251157" + "/YUI/animation/animation-min.js").attr("defer").endTag(false).closeTag("script"); localHTMLWriter1.openTag("script").attr("type", "text/javascript").attr("src", localFormContext.getJSURL() + "8.1.00 201301251157" + "/JQuery/jquery-1.4.2.min.js").attr("defer").endTag(false).closeTag("script"); localHTMLWriter1.openTag("script").attr("type", "text/javascript").attr("src", localFormContext.getJSURL() + "8.1.00 201301251157" + "/JQuery/jquery.treeTable.min.js").attr("defer").endTag(false).closeTag("script"); String str8 = this.requestService.getRequestParamsString();
/*    */     try { localHTMLWriter1.openTag("script").attr("type", "text/javascript").endTag(false); String str9 = this.fieldgraph.getServer().toLowerCase() + this.fieldgraph.getForm().getName().toString(); String str10 = URLEncoder.encode(str9, "UTF-8"); localHTMLWriter1.append("document.write('\\x3cscript src=\"" + localFormContext.getRelativeContextURL() + localFormContext.getFormURL() + str1 + "/" + "8.1.00 201301251157" + "/" + "uds.js" + "?").append("'+getCookie(\"MJUID\")+'\"\\x3e\\x3c/script\\x3e\\x3cscript charset=\"utf-8\" src=\"udd.js?w=").append(JSWriter._urlencode(str9)).append("'+encodeURIComponent(name)+'\"\\x3e\\x3c/script\\x3e');"); localHTMLWriter1.closeTag("script"); } catch (UnsupportedEncodingException localUnsupportedEncodingException3) { if (!$assertionsDisabled) throw new AssertionError();  } localHTMLWriter1.openTag("script").attr("type", "text/javascript").attr("src", "form.js/" + localFormContext.getFieldGraphURLParam(this.fieldgraph.getForm().getServerLogin().getPermissionsKey(), localViewInfo.getID(), this.fieldgraph.getForm()) + ".js?" + str8).attr("defer").endTag(false).closeTag("script"); if ((!localFormContext.IsVoiceAccessibleUser()) && (Configuration.getInstance().getBooleanProperty("arsystem.enableSkins", false))) { localHTMLWriter1.openTag("script").attr("type", "text/javascript").endTag(false); localHTMLWriter1.append("document.writeln('\\x3clink rel=\"stylesheet\" href=\"" + localFormContext.getRelativeContextURL() + localFormContext.getFormURL() + "'+ encodeURIComponent(\"" + str1 + "\") +'" + "/" + "'+ encodeURIComponent(\"" + str2 + "\") +'" + "/" + "'+ encodeURIComponent(\"" + localViewInfo.getLabel() + "\") +'" + "/ARSystemSkin.css" + "?" + "cacheid=" + localFormContext.getFieldGraphURLParam(this.fieldgraph.getForm().getServerLogin().getPermissionsKey(), localViewInfo.getID(), this.fieldgraph.getForm()) + "\"" + " " + "\\x3e');"); localHTMLWriter1.closeTag("script"); } if (MWorkflowProfiling) { localHTMLWriter1.openTag("script").attr("type", "text/javascript").endTag(false).append("var prof=Profile_Start(\"Load page\",0,start);Profile_Stop(Profile_Start(\"Load scripts\",0,start));"); localHTMLWriter1.closeTag("script"); } localHTMLWriter1.closeTag("head"); int i = UserDataEmitter.WAIT_CURSOR_MODE; int j = (i == 1) || (i == 2) || (i == 4) ? 1 : 0; localHTMLWriter1.openTag("body").attr("onload", "ScriptLoaded()").attr("draghandler", "BodyDrag").attr("class", "yui-skin-sam").attr("style", "background:none;"); localHTMLWriter1.endTag(); String str11 = Configuration.getInstance().getProperty("arsystem.waiting_cursor_innerhtml", "").trim(); if (str11.length() > 0) str11 = JSWriter.escape(str11); else str11 = "<div class='loadingContainer'><img class='loadingImage' src='" + localFormContext.getResourceURL() + "images/Progress_NonModal-circle.gif'/><span class='loadingText'>" + MessageTranslation.getLocalizedText(SessionData.get().getLocale(), "Loading...") + "</span></div>"; if (j != 0) localHTMLWriter1.append("<div id='PageLoadProgress' class='PageLoadProgress'>" + str11 + "</div><div id='FormApp' arindex='FormApp' class='FormApp'" + (!localFormContext.IsVoiceAccessibleUser() ? " style=display:none" : "") + ">"); if (Configuration.getInstance().getBooleanProperty("arsystem.http_post_via_applet_for_gecko", false)) localHTMLWriter1.append("<script>if(navigator.userAgent.toLowerCase().indexOf('gecko')!=-1){document.write(\"<applet id=PostAppletElement name=PostApplet code='HTTPPost.class' codebase='" + localFormContext.getRelativeContextURL() + "shared' width=10 height=10 style='visibility:hidden'></applet>\"); }</script>"); if (MWorkflowProfiling) localHTMLWriter1.openTag("script").attr("type", "text/javascript").endTag(false).append("var domprof=Profile_Start('DOM Fields',0);").closeTag("script"); HTMLWriter localHTMLWriter2 = new HTMLWriter(new StringBuilder(102400)); genBasicDivForHTML(false, localViewInfo, localFormContext, arg0, localHTMLWriter1, localHTMLWriter2); if (j != 0) localHTMLWriter1.append("</div>"); if (MWorkflowProfiling) localHTMLWriter1.openTag("script").attr("type", "text/javascript").endTag(false).append("Profile_Stop(domprof);").closeTag("script"); localHTMLWriter1.openTag("div").attr("id", "ardialogfp").attr("class", "DialogFloatHide").endTag().closeTag("div"); localHTMLWriter1.append(localHTMLWriter2.toString()); localHTMLWriter1.openTag("script").attr("type", "text/javascript").endTag(false); localHTMLWriter1.append("var ReportSelForm=\"").append(str3).append("\";"); localHTMLWriter1.append("var ReportConsoleForm=\"").append((String)localObject1).append("\";"); localHTMLWriter1.closeTag("script"); localHTMLWriter1.closeTag("body"); if (MWorkflowProfiling) localHTMLWriter1.openTag("script").attr("type", "text/javascript").endTag(false).append("Profile_Stop(prof);").closeTag("script"); localHTMLWriter1.closeTag("html"); TextDirStyleContext.reset(); return localHTMLWriter1.toString(); } 
/*  1 */   private void genBasicDivForHTML(boolean arg0, Form.ViewInfo arg1, FormContext arg2, OutputNotes arg3, HTMLWriter arg4, HTMLWriter arg5) throws GoatException { boolean bool = false; if ((arg1.getFillStyle() == 2) && (arg0)) bool = true; arg4.openTag("div").attr("id", "Toolbar").attr("arindex", "Toolbar").endTag(false); ToolbarBuilder localToolbarBuilder = new ToolbarBuilder(arg2, arg4, arg1.getMenuAccessHiddenMask()); arg4.closeTag("div"); if (!arg0) arg4.openTag("div").attr("id", "PromptBar").attr("arindex", "PromptBar").attr("class", "promptbarc").endTag(false).openTag("table").attr("class", "prompttable").attr("id", "pbartable").endTag(false).openWholeTag("tbody").closeTag("tbody", false).closeTag("table", false).closeTag("div"); arg4.openTag("div").attr("id", "ResultsList").attr("arindex", "ResultsList").endTag(); genResultsListHTML(arg4); arg4.closeTag("div"); arg4.openTag("div").attr("id", "Splitter").attr("arindex", "Splitter").attr("draggable", 1).attr("dragoriginal", 1).attr("dragRl", 1).endCloseTag("div"); arg4.openTag("div").attr("id", "FormContainer").attr("arindex", "FormContainer");
/*    */     Object localObject;
/*  1 */     if (arg1.getFillStyle() == 2) { arg4.attr("class", "flowP FillWidthView"); arg4.attr("arvspace", arg1.getMVerSpace()); localObject = new StringBuilder(); String str1 = getViewMarginsForFlow(); String str2 = genFlowLayoutBackgroundColor(arg4); ((StringBuilder)localObject).append(str2); ((StringBuilder)localObject).append(str1); StringBuilder localStringBuilder = new StringBuilder(); Form.ViewInfo localViewInfo1 = arg1; if (getImage_aroundBody1$advice(this, localViewInfo1, ViewInfoAspect.aspectOf(), localViewInfo1, null) != null) { Form.ViewInfo localViewInfo2 = arg1; localStringBuilder = getImage_aroundBody3$advice(this, localViewInfo2, ViewInfoAspect.aspectOf(), localViewInfo2, null).getBckgrdImageStr(arg1.mDetailImageAlign, arg1.mDetailImageJustify, true); } arg4.attr("style", ((StringBuilder)localObject).toString() + localStringBuilder.toString()); } if (!ServerInfo.get(this.fieldgraph.getForm().getServer()).isCaseSensitive()) arg4.attr("arcs", 1); arg4.attr("arfillstyle", arg1.getFillStyle()); genBackgroundColor(arg4); arg4.endTag(); genBackgroundContainer(arg4, arg3); if (arg1.getFillStyle() == 1) localObject = "100%"; else if (arg1.getFillStyle() == 2) localObject = "auto"; else localObject = this.fieldgraph.getOutputNotes().getMaxFieldY() + ""; if (!bool) if (TextDirStyleContext.get().isRTL()) arg4.openTag("div").attr("style", "top:0;right:0;width:" + ((arg1.getFillStyle() == 1) || (arg1.getFillStyle() == 2) ? "100%" : Integer.valueOf(this.fieldgraph.getOutputNotes().getMaxFieldX())) + ";height:" + (String)localObject).endTag(false).append("&nbsp;").closeTag("div"); else arg4.openTag("div").attr("style", "top:0;left:0;width:" + ((arg1.getFillStyle() == 1) || (arg1.getFillStyle() == 2) ? "100%" : Integer.valueOf(this.fieldgraph.getOutputNotes().getMaxFieldX())) + ";height:" + (String)localObject).endTag(false).append("&nbsp;").closeTag("div"); 
/*  1 */     if ((arg1.mHeaderContent != null) && (!arg0)) arg4.append(updateSkinProperties(arg1)); genAllFieldsHTML(arg4, arg5); if (arg1.mFooterContent != null) arg4.append(arg1.mFooterContent); arg4.closeTag("div"); if (!this.fieldgraph.hasAuthoredSearchBar()) genDefaultQueryBarHTML(arg4); genMiscHTML(arg4, arg0, bool); } 
/*  1 */   private String updateSkinProperties(Form.ViewInfo arg0) throws GoatException { long l = System.currentTimeMillis(); String str = arg0.mHeaderContent;
/*    */     try { ServerLogin localServerLogin1 = SessionData.get().getServerLogin(this.fieldgraph.getServer()); SkinDefinitionList localSkinDefinitionList = this.skinService.getSkins(localServerLogin1, arg0); if ((localSkinDefinitionList.getSize() > 0) && (Configuration.getInstance().getBooleanProperty("arsystem.enableSkins", false))) { ServerLogin localServerLogin2 = ServerLogin.getAdmin(this.fieldgraph.getServer()); SkinDefinitionMap localSkinDefinitionMap = this.skinService.getWebHeaderSkinProperties(localServerLogin2, arg0, localSkinDefinitionList); str = SkinHelper.replaceSkinProperties(str, "---", localSkinDefinitionMap, (short)6); } else { str = SkinHelper.replaceSkinProperties(str, "---", null, (short)6); } MLog.fine("updating skin properties " + (System.currentTimeMillis() - l)); } catch (GoatException localGoatException1) { MLog.fine("updating skin properties " + localGoatException1); throw localGoatException1; } return str; } 
/*  1 */   private static String buildServerMessages(GoatServerMessage[] arg0) { StringBuilder localStringBuilder = new StringBuilder(); if (arg0 != null) { for (int i = 0; i < arg0.length; i++) localStringBuilder.append(arg0[i].toString()); return localStringBuilder.toString(); } return null; } 
/*  1 */   private void genResultsListHTML(HTMLWriter arg0) throws GoatException { FieldGraph.Node localNode = this.fieldgraph.getResultsList(); if (localNode != null) this.fieldgraphService.traverseDepthFirst(this.fieldgraph, localNode, new HTMLFieldGraphVisitor(arg0, this.emitterFactory), new DummyFieldGraphVistorAccess());  } 
/*  1 */   private void genBackgroundColor(HTMLWriter arg0) throws GoatException { this.fieldgraph.getViewInfo().emitBackgroundColor(arg0); } 
/*  1 */   private String genFlowLayoutBackgroundColor(HTMLWriter arg0) throws GoatException { return this.fieldgraph.getViewInfo().emitFlowBackgroundColor(arg0); } 
/*  1 */   private void genBackgroundContainer(HTMLWriter arg0, OutputNotes arg1) throws GoatException { this.fieldgraph.getViewInfo().buildBackgroundContainer(arg0, arg1.getMaxFieldX(), arg1.getMaxFieldY()); } 
/*  1 */   private void genAllFieldsHTML(HTMLWriter arg0, HTMLWriter arg1) throws GoatException { this.fieldgraphService.traverseDepthFirst_takeTwo(this.fieldgraph, new HTMLFieldGraphVisitor(arg0, this.emitterFactory), new HTMLNonFloatFieldGraphVisitorAccess(), new HTMLFieldGraphVisitor(arg1, this.emitterFactory), new HTMLFloatFieldGraphVisitorAccess()); } 
/*  1 */   private void genDefaultQueryBarHTML(HTMLWriter arg0) throws GoatException { arg0.openTag("div").attr("id", "QueryBar").attr("arindex", "QueryBar").attr("class", "AdvancedSearchBar").attr("arid", "1005").attr("artype", "SearchBar").endTag(); arg0.openTag("label").attr("class", "hidden").attr("style", "left:0;top:0;").attr("for", "arid1005").endTag(false); arg0.cdata(MessageTranslation.getLocalizedText(SessionData.get().getLocale(), "Advanced Search Bar")).closeTag("label"); arg0.closeTag("div"); } 
/*  1 */   private void genMiscHTML(HTMLWriter arg0, boolean arg1, boolean arg2) { FormContext localFormContext = FormContext.get(); arg0.openTag("input").attr("id", "ARState").attr("arindex", "ARState").attr("type", "text"); if ((arg1) && (arg2)) arg0.attr("style", "display: none"); else arg0.attr("style", "visibility:hidden"); arg0.closeOpenTag(false); if (!arg1) { arg0.openTag("div").attr("id", "artooltip").attr("style", "top:0; visibility:hidden;").endTag().closeTag("div"); arg0.openTag("div").attr("id", "dndproxy").attr("style", "top:0; visibility:hidden;").endTag(); arg0.openTag("img").attr("id", "dndproxyValidImgSingle").attr("style", "vertical-align:middle").attr("src", localFormContext.getResourceURL() + "images/DragDrop-Valid-single.gif").closeOpenTag(true); arg0.openTag("img").attr("id", "dndproxyInvalidImgSingle").attr("style", "vertical-align:middle").attr("src", localFormContext.getResourceURL() + "images/DragDrop-NotValid-single.gif").closeOpenTag(true); arg0.openTag("img").attr("id", "dndproxyValidImgMultiple").attr("style", "vertical-align:middle").attr("src", localFormContext.getResourceURL() + "images/DragDrop-Valid-multiple.gif").closeOpenTag(true); arg0.openTag("img").attr("id", "dndproxyInvalidImgMultiple").attr("style", "vertical-align:middle").attr("src", localFormContext.getResourceURL() + "images/DragDrop-NotValid-multiple.gif").closeOpenTag(true); arg0.openTag("span").attr("id", "dndproxylabel").attr("style", "vertical-align:middle").endTag(); arg0.closeTag("span"); arg0.closeTag("div"); arg0.openTag("textarea").attr("style", "visibility: hidden; z-index: 1; position: absolute; top: -9999px; left: -9999px;").attr("id", "rtf_editor").endTag(false).closeTag("textarea"); if (FormContext.get().IsVoiceAccessibleUser()) { arg0.openTag("div").endTag(); arg0.openTag("input").attr("id", "accChgsFlg").attr("type", "hidden").closeOpenTag(true); arg0.closeTag("div"); }  }  } 
/*  1 */   public String genJS(ActiveLinkCollector arg0, TemplateCollector arg1, OutputNotes arg2) throws GoatException { Form.ViewInfo localViewInfo1 = this.fieldgraph.getViewInfo(); FieldGraph.Node localNode1 = this.fieldgraph.getRoot(); FieldGraph.Node localNode2 = this.fieldgraph.getResultsList(); Form localForm = this.fieldgraph.getForm(); String str1 = this.fieldgraph.getServer(); String str2 = this.fieldgraph.getForm().getSchemaKey(); Form.ViewInfo localViewInfo2 = this.fieldgraph.getViewInfo(); String str3 = str1 + "_" + str2 + "_" + localViewInfo2.mLabel; FormContext localFormContext = FormContext.get(); JSWriter localJSWriter1 = new JSWriter(new StringBuilder(196608)); if (localViewInfo1.isRTL()) TextDirStyleContext.set(TextDirStyleContext.getRTLStyle()); else TextDirStyleContext.set(TextDirStyleContext.getLTRStyle()); if (MWorkflowProfiling) localJSWriter1.statement("var jsfmprof=Profile_Start('Parsing Form Data and Workflow',0)"); localJSWriter1.statement("var highlight=false"); localJSWriter1.append("setFormDataHolder('" + str1 + "','" + str2 + "','" + localViewInfo2.mLabel + "', "); localJSWriter1.startStatement(" new function()"); localJSWriter1.openObj(); localJSWriter1.append("\n"); localJSWriter1.statement("this.cacheid=\"" + UrlHelper.getCacheID(localForm, localViewInfo1) + "\""); if (MWorkflowProfiling) localJSWriter1.statement("var jsprof=Profile_Start('Default Form Data parsing',0)"); genDefaults(localJSWriter1); if (MWorkflowProfiling) localJSWriter1.statement("Profile_Stop(jsprof)"); if (MWorkflowProfiling) localJSWriter1.statement("var jsprof=Profile_Start('Drag & Drop Init',0)"); genDragDropJS(localJSWriter1); if (MWorkflowProfiling) localJSWriter1.statement("Profile_Stop(jsprof)"); localJSWriter1.startThisFunction("JField_Init", "windowID"); if (MWorkflowProfiling) localJSWriter1.statement("var jsprof=Profile_Start('JField Init',0)"); genResultsListJS(localJSWriter1); genAllFieldsJS(localJSWriter1); if (MWorkflowProfiling) localJSWriter1.statement("Profile_Stop(jsprof)"); localJSWriter1.endFunction(); genMiscScript(localJSWriter1); genMenus(localJSWriter1, arg2); genTitles(localJSWriter1); genKeywords(localJSWriter1, localFormContext.getRelativeContextURL(), this.fieldgraph); localJSWriter1.startStatement("this.Form="); localJSWriter1.openObj(); JSWriter localJSWriter2 = new JSWriter(); genSearchMenu(localJSWriter2); localJSWriter1.property("SearchBarMenuDef", localJSWriter2); localJSWriter1.append("\n"); JSWriter localJSWriter3 = new JSWriter(); genEnumFieldsMenu(localJSWriter3); localJSWriter1.property("SearchBarEnumFields", localJSWriter3); localJSWriter1.append("\n"); JSWriter localJSWriter4 = new JSWriter(); genDefinedSearches(localJSWriter4); localJSWriter1.property("DefinedSearch", localJSWriter4); localJSWriter1.property("currentFormVuiId", localViewInfo1.getID()); localJSWriter1.property("maximizeWindow", localViewInfo1.getMaximizeWindow()); localJSWriter1.property("reqIdStrField", localViewInfo1.getRequestIdField()); localJSWriter1.property("reqIdStr", ""); localJSWriter1.property("statusReqIdStr", ""); localJSWriter1.append("\n"); JSWriter localJSWriter5 = new JSWriter(); localJSWriter5.openObj(); this.fieldgraphService.traverseDepthFirst(this.fieldgraph, new JSDisplayOnlyFieldGraphVisitor(localJSWriter5, this.emitterFactory), new DummyFieldGraphVistorAccess()); localJSWriter5.closeObj(); localJSWriter1.property("displayOnlyFields", localJSWriter5); localJSWriter1.append("\n"); JSWriter localJSWriter6 = new JSWriter(); localJSWriter6.openList(); this.fieldgraphService.traverseDepthFirst(this.fieldgraph, new JSGlobalFieldGraphVisitor(localJSWriter6, this.emitterFactory), new DummyFieldGraphVistorAccess()); localJSWriter6.closeList(); localJSWriter1.property("globalFields", localJSWriter6); JSWriter localJSWriter7 = new JSWriter(); localJSWriter7.openObj(); this.fieldgraphService.traverseDepthFirst(this.fieldgraph, new JSSystemFieldGraphVisitor(localJSWriter7, this.emitterFactory), new DummyFieldGraphVistorAccess()); localJSWriter7.closeObj(); localJSWriter1.property("systemFields", localJSWriter7); localJSWriter1.property("UseResultsListPane", localNode2 != null); localJSWriter1.property("LastFormFID", 0); localJSWriter1.property("ShowTb", localViewInfo1.getShowToolbar()); long l = localViewInfo1.getMenuAccessHiddenMask(); ServerLogin localServerLogin = localForm.getServerLogin(); boolean bool = false;
/*    */     try { bool = ((l & 0x4) == 0L) && ((localServerLogin.getAdminFlag()) || (localServerLogin.isSubAdministrator())); } catch (ARException localARException) { throw new GoatException(localARException); } localJSWriter1.property("RLDelete", bool); localJSWriter1.property("RLReport", (l & 0x100) == 0L); localJSWriter1.property("TbSearch", (l & 0x1000) == 0L); localJSWriter1.property("TbSave", (l & 0x40) == 0L); localJSWriter1.append("\n"); localJSWriter1.closeObj().endStatement(); localJSWriter1.closeObj().endStatement(); localJSWriter1.append(");\n"); localJSWriter1.append("\n"); localJSWriter1.append("setFormWorkflowHolder('" + str1 + "','" + str2 + "','" + localViewInfo2.mLabel + "', "); localJSWriter1.startStatement(" new function()"); localJSWriter1.openObj(); localJSWriter1.append("\n"); if (MWorkflowProfiling) localJSWriter1.statement("var jswkprof=Profile_Start('Parsing workflow - setFormWorkflowHolder',0)"); arg1.emitTemplateCollection(localJSWriter1, arg2, this.emitterFactory, this.fieldgraph); arg0.emitFormCollections(localJSWriter1, arg2, this.emitterFactory); if (MWorkflowProfiling) localJSWriter1.statement("Profile_Stop(jswkprof)"); localJSWriter1.closeObj().endStatement(); localJSWriter1.append("\n);\n"); localJSWriter1.statement("var " + JSWriter.makeJSFunctionName("formjs_", str3, "_loaded") + " = true"); if (MWorkflowProfiling) localJSWriter1.statement("Profile_Stop(jsfmprof)"); TextDirStyleContext.reset(); return localJSWriter1.toString(); } 
/*  1 */   public String emitSystemSkins(BrowserType arg0) throws GoatException { StringBuilder localStringBuilder = new StringBuilder(10240); Form.ViewInfo localViewInfo = this.fieldgraph.getViewInfo(); Form localForm = this.fieldgraph.getForm(); ServerLogin localServerLogin = localForm.getServerLogin(); SkinDefinitionList localSkinDefinitionList = this.skinService.getSkins(localServerLogin, localViewInfo); SkinDefinitionMap localSkinDefinitionMap = null; if (localSkinDefinitionList.getSize() > 0) localSkinDefinitionMap = this.skinService.getSystemSkinProperties(localServerLogin, localViewInfo, localSkinDefinitionList); else return ""; Value localValue = localSkinDefinitionMap.getProperty("", "---", "", 6602); Object localObject1 = SkinPropertyMapper.mPropToHTMLColour(localValue); localValue = localSkinDefinitionMap.getProperty("", "---", "", 6601); String str1 = SkinPropertyMapper.mPropToHTMLColour(localValue); if ((str1 != null) && (str1.length() > 0)) { if (localObject1 == null) localObject1 = str1; emitSkinsForPopUpHeaderdColor(localStringBuilder, arg0, str1, (String)localObject1); } localValue = localSkinDefinitionMap.getProperty("", "---", "", 6611); String str2 = SkinPropertyMapper.mPropToHTMLColour(localValue); localValue = localSkinDefinitionMap.getProperty("", "---", "", 6612); String str3 = SkinPropertyMapper.mPropToHTMLColour(localValue); if ((str2 != null) && (str2.length() > 0)) { if (str3 == null) str3 = str2; emitSkinsForPopUpTblHdrFtrdColor(localStringBuilder, arg0, str2, str3); } localValue = localSkinDefinitionMap.getProperty("", "---", "", 6603); Object localObject2 = SkinPropertyMapper.mPropToHTMLColour(localValue); localValue = localSkinDefinitionMap.getProperty("", "---", "", 6604); String str4 = SkinPropertyMapper.mPropToHTMLColour(localValue); if ((str4 != null) && (str4.length() > 0)) { if (localObject2 == null) localObject2 = str4; emitSkinsForColumnHeader(localStringBuilder, arg0, str4, (String)localObject2); } localValue = localSkinDefinitionMap.getProperty("", "---", "", 5207); String str5 = SkinPropertyMapper.mPropToHTMLColour(localValue); if ((str5 != null) && (str5.length() > 0)) { localStringBuilder.append("\n"); localStringBuilder.append("div").append('.').append("BaseTableHeader").append(' '); localStringBuilder.append("{").append("\n"); localStringBuilder.append("color").append(":").append(str5).append(" !important;"); localStringBuilder.append("\n"); localStringBuilder.append("}"); } localValue = localSkinDefinitionMap.getProperty("", "---", "", 6605); String str6 = SkinPropertyMapper.mPropToHTMLColour(localValue); if ((str6 != null) && (str6.length() > 0)) emitSkinsForMenuRollover(localStringBuilder, str6); localValue = localSkinDefinitionMap.getProperty("", "---", "", 6606); String str7 = SkinPropertyMapper.mPropToHTMLColour(localValue); if ((str7 != null) && (str7.length() > 0)) { localStringBuilder.append("\n"); localStringBuilder.append("tr").append('.').append("SelPrimary").append(' '); localStringBuilder.append("td").append(',').append("tr").append('.').append("SelPrimary").append(' '); localStringBuilder.append("td").append(' ').append("input").append(' '); localStringBuilder.append("{").append("\n"); localStringBuilder.append("background-color").append(":").append(str7).append(" !important;"); localStringBuilder.append("\n"); localStringBuilder.append("}"); localStringBuilder.append("\n"); localStringBuilder.append(".treetitleselectedfocused ").append(' '); localStringBuilder.append("{").append("\n"); localStringBuilder.append("background-color").append(":").append(str7).append(" !important;"); localStringBuilder.append("\n"); localStringBuilder.append("}"); localStringBuilder.append("\n"); localStringBuilder.append("FIELDSET").append('.').append("SelPrimary").append(' '); localStringBuilder.append("{").append("\n"); localStringBuilder.append("background-color").append(":").append(str7).append(" !important;"); localStringBuilder.append("\n"); localStringBuilder.append("}"); localStringBuilder.append("\n"); } localValue = localSkinDefinitionMap.getProperty("", "---", "", 6607); String str8 = SkinPropertyMapper.mPropToHTMLColour(localValue); if ((str8 != null) && (str8.length() > 0)) { localStringBuilder.append("\n"); localStringBuilder.append("tr").append('.').append("SelSecondary").append(' '); localStringBuilder.append("td").append(',').append("tr").append('.').append("SelSecondary").append(' '); localStringBuilder.append("td").append(' ').append("input").append(' '); localStringBuilder.append("{").append("\n"); localStringBuilder.append("background-color").append(":").append(str8).append(" !important;"); localStringBuilder.append("\n"); localStringBuilder.append("}"); localStringBuilder.append("\n"); localStringBuilder.append("FIELDSET").append('.').append("SelSecondary").append(' '); localStringBuilder.append("{").append("\n"); localStringBuilder.append("background-color").append(":").append(str8).append(" !important;"); localStringBuilder.append("\n"); localStringBuilder.append("}"); localStringBuilder.append("\n"); } localValue = localSkinDefinitionMap.getProperty("", "---", "", 6608); String str9 = SkinPropertyMapper.mPropToHTMLColour(localValue); localValue = localSkinDefinitionMap.getProperty("", "---", "", 6609); String str10 = SkinPropertyMapper.mPropToHTMLColour(localValue); localValue = localSkinDefinitionMap.getProperty("", "---", "", 6610); String str11 = SkinPropertyMapper.mPropToHTMLColour(localValue); emitSkinsForTableRollover(localStringBuilder, str9, str10, str11); return localStringBuilder.toString(); } 
/*  1 */   private void emitSkinsForColumnHeader(StringBuilder arg0, BrowserType arg1, String arg2, String arg3) { arg0.append("\n"); arg0.append("div").append('.').append("PopupTableColHeaders").append(','); arg0.append("div").append('.').append("PopupTableHeader").append(' '); arg0.append("{").append("\n"); if (arg1 == BrowserType.MOZ) { arg0.append("background").append(":").append("-moz-linear-gradient("); arg0.append("top").append(","); arg0.append(arg2).append(","); arg0.append(arg3); arg0.append(") !important;"); arg0.append("\n"); } else if (arg1 == BrowserType.SAF) { arg0.append("background").append(":").append("-webkit-gradient("); arg0.append("linear,right top,right bottom,"); arg0.append("from("); arg0.append(arg2); arg0.append("),"); arg0.append("to("); arg0.append(arg3); arg0.append(")) !important;"); arg0.append("\n"); } else { arg0.append("filter").append(':').append("progid").append(':'); arg0.append("DXImageTransform.Microsoft.Gradient").append('('); arg0.append("GradientType").append('=').append("0").append(','); arg0.append("StartColorStr").append('=').append("'" + arg2 + "'").append(','); arg0.append("EndColorStr").append('=').append("'" + arg3 + "'").append(")!important;"); arg0.append("\n"); } arg0.append("}"); arg0.append("\n"); arg0.append("div").append('.').append("BaseTableColHeaders").append(','); arg0.append("div").append('.').append("BaseTableHeader").append(' '); arg0.append("{").append("\n"); if (arg1 == BrowserType.MOZ) { arg0.append("background").append(":").append("-moz-linear-gradient("); arg0.append("top").append(","); arg0.append(arg2).append(","); arg0.append(arg3); arg0.append(") !important;"); arg0.append("\n"); } else if (arg1 == BrowserType.SAF) { arg0.append("background").append(":").append("-webkit-gradient("); arg0.append("linear,right top,right bottom,"); arg0.append("from("); arg0.append(arg2); arg0.append("),"); arg0.append("to("); arg0.append(arg3); arg0.append(")) !important;"); arg0.append("\n"); } else { arg0.append("filter").append(':').append("progid").append(':'); arg0.append("DXImageTransform.Microsoft.Gradient").append('('); arg0.append("GradientType").append('=').append("0").append(','); arg0.append("StartColorStr").append('=').append("'" + arg2 + "'").append(','); arg0.append("EndColorStr").append('=').append("'" + arg3 + "'").append(")!important;"); arg0.append("\n"); } arg0.append("}"); } 
/*  1 */   private void emitSkinsForTableRollover(StringBuilder arg0, String arg1, String arg2, String arg3) { if ((arg3 != null) && (arg3.length() > 0)) { arg0.append("\n"); arg0.append("tr").append('.').append("Rollover").append(' '); arg0.append("td").append(' ').append("{").append("\n"); arg0.append("background-color").append(":").append(arg3).append(" !important;"); arg0.append("\n").append("}"); arg0.append("\n"); arg0.append(".treetitlerollover").append(' '); arg0.append("{").append("\n"); arg0.append("background-color").append(":").append(arg3).append(" !important;"); arg0.append("\n").append("}"); arg0.append("\n"); arg0.append("FIELDSET").append('.').append("RolloverRound").append(' '); arg0.append("{").append("\n"); arg0.append("border").append(":").append("2px solid ").append(arg3).append(" !important;"); arg0.append("\n"); arg0.append("}"); } if ((arg1 != null) && (arg1.length() > 0)) { arg0.append("\n"); arg0.append("tr").append('.').append("SelPrimaryRollover").append(' '); arg0.append("td").append(' ').append("{").append("\n"); arg0.append("background-color").append(":").append(arg1).append(" !important;"); arg0.append("\n").append("}"); arg0.append("\n"); arg0.append(".treetitleselectedrollover").append(' '); arg0.append("{").append("\n"); arg0.append("background-color").append(":").append(arg1).append(" !important;"); arg0.append("\n").append("}"); } if ((arg2 != null) && (arg2.length() > 0)) { arg0.append("\n"); arg0.append("tr").append('.').append("SelSecondaryRollover").append(' '); arg0.append("td").append(' ').append("{").append("\n"); arg0.append("background-color").append(":").append(arg2).append(" !important;"); arg0.append("\n").append("}"); }  } 
/*  1 */   private void emitSkinsForPopUpTblHdrFtrdColor(StringBuilder arg0, BrowserType arg1, String arg2, String arg3) { arg0.append("\n"); if (arg1 == BrowserType.MOZ) { arg0.append("\n"); arg0.append("div").append('.').append("PopupTableHdr").append(' '); arg0.append("{").append("\n"); arg0.append("background").append(":").append("-moz-linear-gradient("); arg0.append("top").append(","); arg0.append(arg2).append(","); arg0.append(arg3); arg0.append(") !important;"); arg0.append("\n"); arg0.append("}"); arg0.append("\n"); arg0.append("div").append('.').append("PopupTableFtr").append(' '); arg0.append("{").append("\n"); arg0.append("background").append(":").append("-moz-linear-gradient("); arg0.append("top").append(","); arg0.append(arg2).append(","); arg0.append(arg3); arg0.append(") !important;"); arg0.append("\n"); arg0.append("}"); arg0.append("\n"); arg0.append("div").append('.').append("TableHdr").append(','); arg0.append("div").append('.').append("TableFtr").append(' '); arg0.append("{").append("\n"); arg0.append("background").append(":").append("-moz-linear-gradient("); arg0.append("top").append(","); arg0.append(arg2).append(","); arg0.append(arg3); arg0.append(") !important;"); arg0.append("\n"); arg0.append("}"); } else if (arg1 == BrowserType.SAF) { arg0.append("\n"); arg0.append("div").append('.').append("PopupTableHdr").append(' '); arg0.append("{").append("\n"); arg0.append("background").append(":").append("-webkit-gradient("); arg0.append("linear,right top,right bottom,"); arg0.append("from("); arg0.append(arg2); arg0.append("),"); arg0.append("to("); arg0.append(arg3); arg0.append(")) !important;"); arg0.append("\n"); arg0.append("}"); arg0.append("\n"); arg0.append("div").append('.').append("PopupTableFtr").append(' '); arg0.append("{").append("\n"); arg0.append("background").append(":").append("-webkit-gradient("); arg0.append("linear,right top,right bottom,"); arg0.append("from("); arg0.append(arg2); arg0.append("),"); arg0.append("to("); arg0.append(arg3); arg0.append(")) !important;"); arg0.append("\n"); arg0.append("}"); arg0.append("\n"); arg0.append("div").append('.').append("TableHdr").append(','); arg0.append("div").append('.').append("TableFtr").append(' '); arg0.append("{").append("\n"); arg0.append("background").append(":").append("-webkit-gradient("); arg0.append("linear,right top,right bottom,"); arg0.append("from("); arg0.append(arg2); arg0.append("),"); arg0.append("to("); arg0.append(arg3); arg0.append(")) !important;"); arg0.append("\n"); arg0.append("}"); } else { arg0.append("\n"); arg0.append("div").append('.').append("PopupTableHdr").append(' '); arg0.append("{").append("\n"); arg0.append("filter").append(':').append("progid").append(':'); arg0.append("DXImageTransform.Microsoft.Gradient").append('('); arg0.append("GradientType").append('=').append("0").append(','); arg0.append("StartColorStr").append('=').append("'" + arg2 + "'").append(','); arg0.append("EndColorStr").append('=').append("'" + arg3 + "'").append(")!important;"); arg0.append("\n"); arg0.append("}"); arg0.append("\n"); arg0.append("div").append('.').append("PopupTableFtr").append(' '); arg0.append("{").append("\n"); arg0.append("filter").append(':').append("progid").append(':'); arg0.append("DXImageTransform.Microsoft.Gradient").append('('); arg0.append("GradientType").append('=').append("0").append(','); arg0.append("StartColorStr").append('=').append("'" + arg2 + "'").append(','); arg0.append("EndColorStr").append('=').append("'" + arg3 + "'").append(")!important;"); arg0.append("\n"); arg0.append("}"); arg0.append("\n"); arg0.append("div").append('.').append("TableHdr").append(','); arg0.append("div").append('.').append("TableFtr").append(' '); arg0.append("{").append("\n"); arg0.append("filter").append(':').append("progid").append(':'); arg0.append("DXImageTransform.Microsoft.Gradient").append('('); arg0.append("GradientType").append('=').append("0").append(','); arg0.append("StartColorStr").append('=').append("'" + arg2 + "'").append(','); arg0.append("EndColorStr").append('=').append("'" + arg3 + "'").append(")!important;"); arg0.append("\n"); arg0.append("}"); }  } 
/*  1 */   private void emitSkinsForPopUpHeaderdColor(StringBuilder arg0, BrowserType arg1, String arg2, String arg3) { arg0.append("\n"); if (arg1 == BrowserType.MOZ) { arg0.append("tr").append('.').append("DIVPopupTitleBar").append(' '); arg0.append("td").append('.').append("center").append(' '); arg0.append("{").append("\n"); arg0.append("background").append(":").append("-moz-linear-gradient("); arg0.append("top").append(","); arg0.append(arg2).append(","); arg0.append(arg3); arg0.append(") !important;"); arg0.append("\n"); arg0.append("}"); } else if (arg1 == BrowserType.SAF) { arg0.append("tr").append('.').append("DIVPopupTitleBar").append(' '); arg0.append("{").append("\n"); arg0.append("background").append(":").append("-webkit-gradient("); arg0.append("linear,right top,right bottom,"); arg0.append("from("); arg0.append(arg2); arg0.append("),"); arg0.append("to("); arg0.append(arg3); arg0.append(")) !important;"); arg0.append("\n"); arg0.append("}"); } else { arg0.append("\n"); arg0.append("tr").append('.').append("DIVPopupTitleBar").append(' '); arg0.append("td").append('.').append("topleft").append(' '); arg0.append("{").append("\n"); arg0.append("filter").append(':').append("progid").append(':'); arg0.append("DXImageTransform.Microsoft.Gradient").append('('); arg0.append("GradientType").append('=').append("0").append(','); arg0.append("StartColorStr").append('=').append("'" + arg2 + "'").append(','); arg0.append("EndColorStr").append('=').append("'" + arg3 + "'").append(")!important;"); arg0.append("\n"); arg0.append("}"); arg0.append("\n"); arg0.append("tr").append('.').append("DIVPopupTitleBar").append(' '); arg0.append("td").append('.').append("center").append(' '); arg0.append("{").append("\n"); arg0.append("filter").append(':').append("progid").append(':'); arg0.append("DXImageTransform.Microsoft.Gradient").append('('); arg0.append("GradientType").append('=').append("0").append(','); arg0.append("StartColorStr").append('=').append("'" + arg2 + "'").append(','); arg0.append("EndColorStr").append('=').append("'" + arg3 + "'").append(")!important;"); arg0.append("\n"); arg0.append("}"); arg0.append("\n"); arg0.append("tr").append('.').append("DIVPopupTitleBar").append(' '); arg0.append("td").append('.').append("topright").append(' '); arg0.append("{").append("\n"); arg0.append("filter").append(':').append("progid").append(':'); arg0.append("DXImageTransform.Microsoft.Gradient").append('('); arg0.append("GradientType").append('=').append("0").append(','); arg0.append("StartColorStr").append('=').append("'" + arg2 + "'").append(','); arg0.append("EndColorStr").append('=').append("'" + arg3 + "'").append(")!important;"); arg0.append("\n"); arg0.append("}"); }  } 
/*  1 */   private void emitSkinsForMenuRollover(StringBuilder arg0, String arg1) { arg0.append("\n"); arg0.append("td").append('.').append("MenuEntryNameHover").append(' ').append("{"); arg0.append("\n"); arg0.append("background-color"); arg0.append(":"); arg0.append(arg1); arg0.append(" !important;"); arg0.append("\n"); arg0.append("}"); arg0.append("\n"); arg0.append("td").append('.').append("MenuEntrySubHover").append(' ').append("{"); arg0.append("\n"); arg0.append("background-color"); arg0.append(":"); arg0.append(arg1); arg0.append(" !important;"); arg0.append("\n"); arg0.append("}"); arg0.append("\n"); arg0.append("td").append('.').append("MenuEntryNoSubHover").append(' ').append("{"); arg0.append("\n"); arg0.append("background-color"); arg0.append(":"); arg0.append(arg1); arg0.append(" !important;"); arg0.append("\n"); arg0.append("}"); } 
/*  1 */   private void genDefaults(JSWriter arg0) throws GoatException { arg0.append("this.Defaults=").openObj(); this.fieldgraph.getRoot().traverseDepthFirst(new JSDefaultsFieldGraphVisitor(arg0, this.emitterFactory), new DummyFieldGraphVistorAccess()); arg0.closeObj().append(";\n"); } 
/*  1 */   private void genDragDropJS(JSWriter arg0) throws GoatException { JSDragDropFieldGraphVisitor localJSDragDropFieldGraphVisitor = new JSDragDropFieldGraphVisitor(arg0, this.emitterFactory); this.fieldgraph.getRoot().traverseDepthFirst(localJSDragDropFieldGraphVisitor, new DummyFieldGraphVistorAccess()); localJSDragDropFieldGraphVisitor.finish(); } 
/*  1 */   private void genResultsListJS(JSWriter arg0) throws GoatException { FieldGraph.Node localNode = this.fieldgraph.getResultsList(); if (localNode != null) this.fieldgraphService.traverseDepthFirst(this.fieldgraph, localNode, new JSFieldGraphVisitor(arg0, this.emitterFactory), new DummyFieldGraphVistorAccess());  } 
/*  1 */   private void genAllFieldsJS(JSWriter arg0) throws GoatException { this.fieldgraph.getRoot().traverseDepthFirst(new JSFieldGraphVisitor(arg0, this.emitterFactory), new DummyFieldGraphVistorAccess()); } 
/*  1 */   private void genMiscScript(JSWriter arg0) throws GoatException { Map localMap = this.fieldgraph.getNodeMap(); FieldGraph.Node localNode = (FieldGraph.Node)localMap.get(Integer.valueOf(7)); if ((localNode != null) && (localNode.mField != null) && ((localNode.mField instanceof EnumField))) { EnumFieldEmitter localEnumFieldEmitter = (EnumFieldEmitter)this.emitterFactory.getEmitter(localNode.mField); localEnumFieldEmitter.emitStatusInfo(arg0); }  } 
/*  1 */   private void genMenus(JSWriter arg0, OutputNotes arg1) throws GoatException { Form localForm = this.fieldgraph.getForm(); String str = localForm.getServerName(); arg0.append("this.ARMenus=[];"); arg0.append("var ARMenus=this.ARMenus;"); Menu.emitMenus(arg0, str, arg1.getFieldMenuSet()); } 
/*  1 */   private void genTitles(JSWriter arg0) throws GoatException { Form.ViewInfo localViewInfo = this.fieldgraph.getViewInfo(); arg0.startStatement("this.ARTitles="); arg0.openObj(); String str1 = localViewInfo.mAliasSingular != null ? localViewInfo.mAliasSingular : ""; String str2 = localViewInfo.mAliasPlural != null ? localViewInfo.mAliasPlural : ""; arg0.property("pluralLong", str2); arg0.property("singleLong", str1); arg0.closeObj(); arg0.endStatement(); } 
/*  1 */   private void genSearchMenu(JSWriter arg0) throws GoatException { Map localMap = this.fieldgraph.getNodeMap(); arg0.openList(); Iterator localIterator = localMap.values().iterator();
/*    */     FieldGraph.Node localNode;
/*  1 */     for (TreeMap localTreeMap = new TreeMap(String.CASE_INSENSITIVE_ORDER); localIterator.hasNext(); localTreeMap.put(localNode.mField.getSearchBarLabel(), localNode.mField.getSearchBarValue())) { localNode = (FieldGraph.Node)localIterator.next(); if ((localNode.mField == null) || (!localNode.mField.hasSearchBarMenu())); } localIterator = localTreeMap.entrySet().iterator(); for (int i = 1; localIterator.hasNext(); arg0.closeObj()) { if (i == 0) arg0.listSep(); else i = 0; Map.Entry localEntry = (Map.Entry)localIterator.next(); String str = (String)localEntry.getKey(); arg0.openObj(); arg0.propertyDestinedForHTML("l", str); Object localObject = localEntry.getValue(); if ((localObject instanceof JSWriter)) arg0.property("v", (JSWriter)localObject); else arg0.propertyDestinedForHTML("v", (String)localObject);  } arg0.closeList(); } 
/*  1 */   private void genKeywords(JSWriter arg0, String arg1, FieldGraph arg2) throws GoatException { Form localForm = arg2.getForm(); Form.ViewInfo localViewInfo = arg2.getViewInfo(); Keyword.emitKeywords(arg0, localForm, localViewInfo, arg1); } 
/*  1 */   private void genEnumFieldsMenu(JSWriter arg0) throws GoatException { Map localMap = this.fieldgraph.getNodeMap(); Iterator localIterator = localMap.values().iterator();
/*    */     Object localObject;
/*  1 */     for (TreeMap localTreeMap = new TreeMap(); localIterator.hasNext(); localTreeMap.put(((FieldGraph.Node)localObject).mField.getSearchBarLabel(), ((FieldGraph.Node)localObject).mField)) { localObject = (FieldGraph.Node)localIterator.next(); if ((((FieldGraph.Node)localObject).mField == null) || (!((FieldGraph.Node)localObject).mField.hasSearchBarMenu()) || (!DataType.ENUM.equals(((FieldGraph.Node)localObject).mField.getMDataType()))); } arg0.openList();
/*    */     EnumFieldEmitter localEnumFieldEmitter;
/*  1 */     for (localIterator = localTreeMap.keySet().iterator(); localIterator.hasNext(); localEnumFieldEmitter.emitSearchBarMenu(arg0)) { arg0.listSep(); localObject = (EnumField)localTreeMap.get(localIterator.next()); localEnumFieldEmitter = (EnumFieldEmitter)this.emitterFactory.getEmitter((GoatField)localObject); } arg0.closeList(); } 
/*  1 */   private void genDefinedSearches(JSWriter arg0) throws GoatException { Form localForm = this.fieldgraph.getForm(); Form.ViewInfo localViewInfo = this.fieldgraph.getViewInfo(); CachedFieldMap localCachedFieldMap = localForm.getCachedFieldMap(); arg0.openList(); if (localViewInfo.mDefinedSearches != null)
/*    */     {
/*  1 */       String str1;
/*    */       String str2;
/*    */       String str3;
/*    */       ProcessResult localProcessResult;
/*    */       int i;
/*    */       int j;
/*    */       StringBuilder localStringBuilder;
/*    */       String str4;
/*    */       Matcher localMatcher;
/*    */       Object localObject;
/*    */       String str5;
/*    */       Keyword localKeyword;
/*  1 */       for (Iterator localIterator = localViewInfo.mDefinedSearches.keySet().iterator(); localIterator.hasNext(); ) { str1 = (String)localIterator.next(); str2 = (String)localViewInfo.mDefinedSearches.get(str1); }  } arg0.closeList(); } 
/*  1 */   public void emitHelp(PrintWriter arg0) throws GoatException { Form.ViewInfo localViewInfo = this.fieldgraph.getViewInfo(); Form localForm = this.fieldgraph.getForm(); FieldGraph.Node localNode = this.fieldgraph.getRoot(); FormContext localFormContext = FormContext.get(); HTMLWriter localHTMLWriter = new HTMLWriter(); if (localViewInfo.isRTL()) { TextDirStyleContext.set(TextDirStyleContext.getRTLStyle()); localHTMLWriter.openWholeTag("html dir=rtl").openWholeTag("head"); } else { TextDirStyleContext.set(TextDirStyleContext.getLTRStyle()); localHTMLWriter.openWholeTag("html").openWholeTag("head"); } localHTMLWriter.append("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n"); String str1 = localViewInfo.mAliasSingular != null ? localViewInfo.mAliasSingular : localForm.getName().toString(); localHTMLWriter.openWholeTag("title"); String[] arrayOfString = { str1 }; localHTMLWriter.append(MessageTranslation.getLocalizedText(SessionData.get().getLocale(), "{0} (Help)", arrayOfString)); localHTMLWriter.closeTag("title"); localHTMLWriter.openTag("script").attr("type", "text/javascript").attr("src", localFormContext.getJSURL() + "8.1.00 201301251157" + "/" + "bootstrap.js").endTag(false).closeTag("script"); MARSystemHelpCSS.emit(localHTMLWriter, localForm.getServerName()); if (localViewInfo.isRTL()) MARSystemHelpRTLCSS.emit(localHTMLWriter, localForm.getServerName()); localHTMLWriter.closeTag("head"); localHTMLWriter.openWholeTag("body"); localHTMLWriter.openTag("div").attr("class", "FormName").endTag(); localHTMLWriter.cdata(str1); localHTMLWriter.closeTag("div"); localHTMLWriter.openTag("div").attr("class", "FormHelp").endTag(); String str2 = localForm.getHelpText(); if (str2 != null) localHTMLWriter.append(str2); localHTMLWriter.closeTag("div"); FieldGraph localFieldGraph = this.fieldgraph; IFieldGraphService localIFieldGraphService = this.fieldgraphService; instantiateFields_aroundBody5$advice(this, localIFieldGraphService, localFieldGraph, IFieldGraphServiceCacheAspect.aspectOf(), localFieldGraph, null); GoatField.get(localViewInfo, false, true); this.fieldgraphService.traverseDepthFirst(this.fieldgraph, new HTMLHelpFieldGraphVisitor(localHTMLWriter, this.emitterFactory), new DummyFieldGraphVistorAccess()); localHTMLWriter.closeTag("body").closeTag("html"); TextDirStyleContext.reset(); arg0.print(localHTMLWriter); } 
/*  1 */   protected String getViewMarginsForFlow() { Form.ViewInfo localViewInfo = this.fieldgraph.getViewInfo(); StringBuilder localStringBuilder = new StringBuilder(); localStringBuilder.append("padding-left:" + localViewInfo.getMMarginLeft() + "px;"); localStringBuilder.append("padding-top:" + localViewInfo.getMMarginTop() + "px;"); localStringBuilder.append("padding-right:" + localViewInfo.getMMarginRight() + "px;"); localStringBuilder.append("padding-bottom:" + localViewInfo.getMMarginBottom() + "px;"); return localStringBuilder.toString(); } 
/*  1 */   public String genVFHTML(OutputNotes arg0, GoatServerMessage[] arg1) throws GoatException { Form.ViewInfo localViewInfo = this.fieldgraph.getViewInfo(); FormContext localFormContext = FormContext.get(); HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); String str1 = this.fieldgraph.getForm().getServerName(); String str2 = this.fieldgraph.getForm().getName(); Form localForm = Form.get(str1, str2); if (localViewInfo.isRTL()) TextDirStyleContext.set(TextDirStyleContext.getRTLStyle()); else TextDirStyleContext.set(TextDirStyleContext.getLTRStyle()); int i = UserDataEmitter.WAIT_CURSOR_MODE; int j = (i == 1) || (i == 2) || (i == 4) ? 1 : 0; if (j != 0) { localObject = Configuration.getInstance().getProperty("arsystem.waiting_cursor_innerhtml", "").trim(); if (((String)localObject).length() > 0) localObject = JSWriter.escape((String)localObject); else localObject = "<div class='loadingContainer'><img class='loadingImage' src='" + localFormContext.getResourceURL() + "images/Progress_NonModal-circle.gif'/><span class='loadingText'>" + MessageTranslation.getLocalizedText(SessionData.get().getLocale(), "Loading...") + "</span></div>"; localHTMLWriter.append("<div id='PageLoadProgress' class='PageLoadProgress'>" + (String)localObject + "</div><div id='FormApp' arindex='FormApp' class='FormApp'" + (!localFormContext.IsVoiceAccessibleUser() ? " style=display:none" : "") + ">"); } Object localObject = new HTMLWriter(new StringBuilder(102400)); genBasicDivForHTML(true, localViewInfo, localFormContext, arg0, localHTMLWriter, (HTMLWriter)localObject); if (MWorkflowProfiling) localHTMLWriter.openTag("script").attr("type", "text/javascript").endTag(false).append("Profile_Stop(domprof);").closeTag("script"); localHTMLWriter.append("</div>"); TextDirStyleContext.reset(); JSWriter localJSWriter = new JSWriter(new StringBuilder(196608)); localJSWriter.append("this.result=").openObj().property("body", localHTMLWriter.toString()).property("viewname", localViewInfo.getLabel()).property("fp", ((HTMLWriter)localObject).toString()).property("cacheid", FormContext.get().getFieldGraphURLParam(localForm.getServerLogin().getPermissionsKey(), localViewInfo.getID(), localForm)); localJSWriter.closeObj().append(";"); return localJSWriter.toString();
/*    */   }
/*    */ }

/* Location:           D:\temp\原来桌面的\webapps\midtier_hpia32\WEB-INF\lib\MidTier.jar
 * Qualified Name:     com.remedy.arsys.goat.service.DHTMLBuilder
 * JD-Core Version:    0.6.1
 */