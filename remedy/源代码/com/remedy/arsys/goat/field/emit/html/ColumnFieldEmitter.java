/*    */ package com.remedy.arsys.goat.field.emit.html;
/*    */ 
/*    */ import com.bmc.arsys.api.CurrencyDetail;
/*    */ import com.bmc.arsys.api.DataType;
/*    */ import com.bmc.arsys.api.SelectionFieldLimit;
/*    */ import com.bmc.arsys.api.Value;
/*    */ import com.remedy.arsys.goat.ARBox;
/*    */ import com.remedy.arsys.goat.Box;
/*    */ import com.remedy.arsys.goat.Form;
/*    */ import com.remedy.arsys.goat.Form.ViewInfo;
/*    */ import com.remedy.arsys.goat.FormContext;
/*    */ import com.remedy.arsys.goat.GoatException;
/*    */ import com.remedy.arsys.goat.GoatImage;
/*    */ import com.remedy.arsys.goat.TextDirStyleContext;
/*    */ import com.remedy.arsys.goat.aspects.skins.ControlFieldAspect;
/*    */ import com.remedy.arsys.goat.field.CharField;
/*    */ import com.remedy.arsys.goat.field.ColumnField;
/*    */ import com.remedy.arsys.goat.field.ControlField;
/*    */ import com.remedy.arsys.goat.field.CurrencyField;
/*    */ import com.remedy.arsys.goat.field.DateField;
/*    */ import com.remedy.arsys.goat.field.DecimalField;
/*    */ import com.remedy.arsys.goat.field.EnumField;
/*    */ import com.remedy.arsys.goat.field.FieldGraph;
/*    */ import com.remedy.arsys.goat.field.FieldGraph.Node;
/*    */ import com.remedy.arsys.goat.field.GoatField;
/*    */ import com.remedy.arsys.goat.field.GoatField.LightForm;
/*    */ import com.remedy.arsys.goat.field.GoatImageButton;
/*    */ import com.remedy.arsys.goat.field.IntegerField;
/*    */ import com.remedy.arsys.goat.field.NavBarItemField;
/*    */ import com.remedy.arsys.goat.field.RealField;
/*    */ import com.remedy.arsys.goat.field.TODField;
/*    */ import com.remedy.arsys.goat.field.TableField;
/*    */ import com.remedy.arsys.goat.field.TimeField;
/*    */ import com.remedy.arsys.goat.field.TrimField;
/*    */ import com.remedy.arsys.goat.field.ViewField;
/*    */ import com.remedy.arsys.goat.field.type.TypeMap;
/*    */ import com.remedy.arsys.goat.intf.field.emit.IEmitterFactory;
/*    */ import com.remedy.arsys.goat.menu.GroupMenu;
/*    */ import com.remedy.arsys.goat.menu.Menu;
/*    */ import com.remedy.arsys.goat.menu.Menu.MKey;
/*    */ import com.remedy.arsys.goat.permissions.Group;
/*    */ import com.remedy.arsys.log.Log;
/*    */ import com.remedy.arsys.share.HTMLWriter;
/*    */ import com.remedy.arsys.share.ImageRefProp;
/*    */ import com.remedy.arsys.share.JSWriter;
/*    */ import com.remedy.arsys.share.MessageTranslation;
/*    */ import com.remedy.arsys.share.PropColorList;
/*    */ import com.remedy.arsys.share.ServerInfo;
/*    */ import com.remedy.arsys.stubs.SessionData;
/*    */ import com.remedy.arsys.support.FontTable;
/*    */ import java.math.BigDecimal;
/*    */ import java.util.Map;
/*    */ import java.util.regex.Matcher;
/*    */ import java.util.regex.Pattern;
/*    */ 
/*    */ public class ColumnFieldEmitter extends GoatFieldEmitter
/*    */ {
/*  1 */   public static final GoatImageButton mSelectionButton = new GoatImageButton("menu"); protected static final transient Log MLog = Log.get(6); private static final Pattern TRIM_MASSAGER_PATTERN = Pattern.compile("([\n]|[\\s])"); private static final Pattern TRIM_PROTOCOL_PATTERN = Pattern.compile("[a-zA-Z]+:.*"); private static final Pattern TRIM_URL_LINK_PATTERN = Pattern.compile("<a\\s*>?\\s*<?\\s*h\\s*r\\s*e\\s*f\\s*=\\s*\"(([^\"]|(\\\\\"))*)\"([^>]*)>([^<]*)</a>", 10); private static final Pattern FIELD_PROTOCOL_PATTERN = Pattern.compile("\\$.*\\$");
/*    */   private static final int DROPDOWN = 0;
/*    */   private static final int RADIO = 1;
/*    */   private static final int CHECKBOX = 2;
/*    */   private ColumnField columnField;
/*  1 */   private final boolean mEditField = true;
/*    */ 
/*  1 */   public ColumnFieldEmitter(GoatField paramGoatField, IEmitterFactory paramIEmitterFactory) { super(paramGoatField, paramIEmitterFactory); } 
/*  1 */   public void setGf(GoatField arg0) { super.setGf(arg0); setColumnField((ColumnField)arg0); } 
/*  1 */   private void setColumnField(ColumnField arg0) { this.columnField = arg0; } 
/*  1 */   private ColumnField getColumnField() { return this.columnField; } 
/*  1 */   protected void emitImgRefs(JSWriter arg0) { Value localValue = getMImgColValue(); if (localValue != null) { ImageRefProp localImageRefProp = new ImageRefProp(localValue.toString()); String[][] arrayOfString = localImageRefProp.getImgInfo(); if ((arrayOfString != null) && (arrayOfString.length > 0)) { Map localMap = cacheImgCols(localValue); if ((localMap != null) && (localMap.size() > 0)) { arg0.property("irf", localImageRefProp.getEnumFid()); JSWriter localJSWriter1 = new JSWriter(); localJSWriter1.openObj(); for (int i = 0; i < arrayOfString.length; i++) { JSWriter localJSWriter2 = new JSWriter();
/*    */             try { String str1 = arrayOfString[i][0]; int j = Integer.parseInt(arrayOfString[i][0]); GoatImage localGoatImage = (GoatImage)localMap.get(new Integer(j)); if (localGoatImage != null) { String str2 = localGoatImage.getUrl(); if (j == -1) str1 = "'" + str1 + "'"; localJSWriter2.openObj(); localJSWriter2.property("ir", str2); localJSWriter2.property("iat", arrayOfString[i][2]); localJSWriter2.property("irh", localGoatImage.getH()); localJSWriter2.property("irw", localGoatImage.getW()); String str3 = localGoatImage.getContentType(); String str4 = "bmp"; int k = str3.indexOf("/"); assert (k > 0); if (k > 0) str4 = str3.substring(k + 1); localJSWriter2.property("irf", str4); localJSWriter2.closeObj(); localJSWriter1.property(str1, localJSWriter2); }  } catch (NumberFormatException localNumberFormatException1) {  } } localJSWriter1.closeObj(); arg0.property("irv", localJSWriter1); }  }  }  } 
/*  1 */   protected void emitCellColor(JSWriter arg0) { String str1 = getMTableCellColorString(); if (str1 != null) { PropColorList localPropColorList = new PropColorList(str1); if (localPropColorList.isValidColorPropList()) { String[] arrayOfString = localPropColorList.getColorList(); if ((arrayOfString != null) && (arrayOfString.length > 0)) { arg0.property("ccf", localPropColorList.getColorEnumId()); JSWriter localJSWriter = new JSWriter(); localJSWriter.openObj(); for (int i = 0; i < arrayOfString.length; i++) if (arrayOfString[i] != null) { Integer localInteger = Integer.valueOf(i - 1); String str2 = localInteger.toString(); if (localInteger.intValue() == -1) str2 = "'" + str2 + "'"; localJSWriter.property(str2, arrayOfString[i]); } localJSWriter.closeObj(); arg0.property("cc", localJSWriter); }  }  }  } 
/*  1 */   protected void emitScriptProperties(FieldGraph.Node arg0, JSWriter arg1) { super.emitScriptProperties(arg0, arg1); if (isMFromLocalForm()) arg1.property("lcl", 1); if (!isMVisible()) arg1.property("hdn", 1); if (this.columnField.getMAllowSort()) arg1.property("sort", 1); else arg1.property("sort", 0); arg1.property("fid", getMDataFieldID()); DataType localDataType = getColumnField().getMDataFieldDataType(arg0); if (localDataType == null) { arg1.property("t", ""); arg1.property("dt", ""); } else { arg1.property("t", TypeMap.mapDataType(localDataType, this.columnField.getMDataFieldID())); arg1.property("dt", TypeMap.getARDataType(TypeMap.getOperandDataType(localDataType))); if (localDataType == DataType.VIEW) arg1.property("st", getColumnField().getMScrollbars());  } if (getMDisplayType() == 4) arg1.property("edit", "2"); else if (getMDisplayType() == 1) arg1.property("edit", "1"); else arg1.property("edit", "0"); arg1.property("cls", getMCustomCSSStyle()); arg1.property("pnt", getMParentFieldID()); arg1.property("ha", getMHeaderAlignment(arg0)); arg1.property("da", getMDataAlignment(arg0)); if ((isMButtonTBL()) || (getMDisplayType() == 3)) emitTemplate(arg0, arg1); if (this.columnField.getMGroupSeq() > 0) { GoatField localGoatField = getAssociatedField(arg0); if ((localGoatField != null) && (DataType.ENUM.equals(localGoatField.getMDataType()))) emitEnumInfo(arg0, arg1, (EnumField)localGoatField);  } if (FormContext.get().IsVoiceAccessibleUser()) { if ((getMAltText() != null) && (getMAltText().trim().length() > 0)) arg1.property("lbl", getMAltText()); else arg1.property("lbl", getMLabel() == null ? "" : getMLabel());  } else arg1.property("lbl", getMLabel() == null ? "" : getMLabel()); if (getMInitialState() == 0) arg1.property("cw", new ARBox(0L, 0L, getMWidth(), 0L).toBox().mW); emitImgRefs(arg1); emitCellColor(arg1); } 
/*  1 */   protected void emitEnumInfo(FieldGraph.Node arg0, JSWriter arg1, EnumField arg2) { init_EnumField(arg2); arg1.append(",e:").openObj(); for (int i = 0; i < getMEnumLabels().length; i++) { if (i != 0) arg1.append(","); arg1.append(getMEnumIds()[i]).append(":"); arg1.openObj().property("v", getMEnumValues()[i]); arg1.property("l", getMEnumLabels()[i]).closeObj(); } arg1.closeObj(); arg1.property("et", getMEnumType()); } 
/*  1 */   protected void emitTemplate(FieldGraph.Node arg0, JSWriter arg1) { emitScriptProperties_DataField(arg0, arg1); GoatField localGoatField = getAssociatedField(arg0); if (localGoatField == null) return; if (DataType.CHAR.equals(localGoatField.getMDataType())) emitTemplate_CharField(arg0, arg1, (CharField)localGoatField); else if (DataType.INTEGER.equals(localGoatField.getMDataType())) emitTemplate_IntegerField(arg0, arg1, (IntegerField)localGoatField); else if (DataType.DECIMAL.equals(localGoatField.getMDataType())) emitTemplate_DecimalField(arg0, arg1, (DecimalField)localGoatField); else if (DataType.REAL.equals(localGoatField.getMDataType())) emitTemplate_RealField(arg0, arg1, (RealField)localGoatField); else if (DataType.DATE.equals(localGoatField.getMDataType())) emitTemplate_DateField(arg0, arg1, (DateField)localGoatField); else if (DataType.TIME.equals(localGoatField.getMDataType())) emitTemplate_TimeField(arg0, arg1, (TimeField)localGoatField); else if (DataType.TIME_OF_DAY.equals(localGoatField.getMDataType())) emitTemplate_TimeOfDayField(arg0, arg1, (TODField)localGoatField); else if (DataType.CURRENCY.equals(localGoatField.getMDataType())) emitTemplate_CurrencyField(arg0, arg1, (CurrencyField)localGoatField); else if (DataType.ENUM.equals(localGoatField.getMDataType())) emitTemplate_EnumField(arg0, arg1, (EnumField)localGoatField); else if (DataType.CONTROL.equals(localGoatField.getMDataType())) { if ((localGoatField instanceof NavBarItemField)) emitTemplate_NavBarItemField(arg0, arg1, (NavBarItemField)localGoatField); else emitTemplate_ControlField(arg0, arg1, (ControlField)localGoatField);  } else if (DataType.TRIM.equals(localGoatField.getMDataType())) emitTemplate_TrimField(arg0, arg1, (TrimField)localGoatField); else if (DataType.VIEW.equals(localGoatField.getMDataType())) emitTemplate_ViewField(arg0, arg1, (ViewField)localGoatField);  } 
/*  1 */   protected void emitTemplate_ViewField(FieldGraph.Node arg0, JSWriter arg1, ViewField arg2) { HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); emitOpenMarkup_ViewField(arg0, localHTMLWriter, arg2); emitCloseMarkup_ViewField(arg0, localHTMLWriter); arg1.property("template", localHTMLWriter.toString()); arg1.property("vt", getMText()); } 
/*  1 */   protected void emitOpenMarkup_ViewField(FieldGraph.Node arg0, HTMLWriter arg1, ViewField arg2) { super.emitOpenMarkup(arg0, arg1); arg1.openTag("div").attr("artype", getMDataTypeString()).attr("ardbn", getMDBName()).attr("class", getSelectorClassNames()); emitFillAttsInMarkup(arg0, arg1); if (isMDisableChange()) arg1.attr("ardcf", 1); StringBuilder localStringBuilder = new StringBuilder(); if (getMARBox() != null) localStringBuilder.append(getMARBox().toBox().toCSS()); if (getMZOrder() != -1L) localStringBuilder.append("z-index:").append(getMZOrder()).append(';'); localStringBuilder.append("visibility:VISIBILITY_VALUE;background-color:transparent;"); localStringBuilder.append("overflow:OVERFLOW_VALUE;"); arg1.attr("STYLE", localStringBuilder.toString()); arg1.endTag(false); arg1.openTag("iframe"); if (getMARBox() != null) arg1.attr("style", getMARBox().toBox().wholeChildBox().toCSS() + "background-color: transparent;"); else arg1.attr("style", "background-color: transparent;"); arg1.attr("name", "VF" + getMFieldID()); arg1.attr("frameborder", getMBorder()); arg1.attr("scrolling", getMScrollbars()); arg1.attr("allowtransparency", "true"); if (FormContext.get().IsVoiceAccessibleUser()) { if ((getMAltText() != null) && (getMAltText().trim().length() > 0)) arg1.attr("title", getMAltText()); else arg1.attr("title", getMLabel());  } else if (getMLabel() != null) arg1.attr("title", getMLabel()); arg1.attr("src", "DCF_SRC"); arg1.attr("onload", "DVFol()"); arg1.endTag(false); arg1.closeTag("iframe", false); } 
/*  1 */   protected void emitCloseMarkup_ViewField(FieldGraph.Node arg0, HTMLWriter arg1) { super.emitCloseMarkup(arg0, arg1); arg1.closeTag("div", false); } 
/*  1 */   protected void emitTemplate_TrimField(FieldGraph.Node arg0, JSWriter arg1, TrimField arg2) { emitScriptProperties_TrimField(arg0, arg1, arg2); HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); emitOpenMarkup_TrimField(arg0, localHTMLWriter, arg2); emitCloseMarkup_TrimField(arg0, localHTMLWriter); arg1.property("template", localHTMLWriter.toString()); } 
/*  1 */   protected void emitScriptProperties_TrimField(FieldGraph.Node arg0, JSWriter arg1, TrimField arg2) { init_TrimField(arg2); } 
/*  1 */   protected void init_TrimField(TrimField arg0) { if (getMARBox() == null) setMInView(false);  } 
/*  1 */   private void massageText(HTMLWriter arg0, String arg1) { assert (arg1 != null); Matcher localMatcher = TRIM_MASSAGER_PATTERN.matcher(arg1); for (int i = 0; localMatcher.find(); i = localMatcher.end()) { arg0.cdata(arg1.substring(i, localMatcher.start())); String str = localMatcher.group(1); if (str != null) arg0.append(str.equals("\n") ? "<br>" : "&nbsp;"); else arg0.append("&nbsp;");  } arg0.cdata(arg1.substring(i, arg1.length())); } 
/*  1 */   private void appendText(HTMLWriter arg0) { int i = 0; int j = 0; String str1 = null; String str2 = null; String str3 = null; for (Matcher localMatcher = TRIM_URL_LINK_PATTERN.matcher(getMText()); localMatcher.find(); j = localMatcher.end()) { i = localMatcher.start(); massageText(arg0, getMText().substring(j, i)); str1 = localMatcher.group(1); if ((str1 != null) && (str1.length() > 0) && (!TRIM_PROTOCOL_PATTERN.matcher(str1).matches())) str1 = "http://" + str1; arg0.append("<a class=TrimLink"); if (getMHtmlTextColor() != null) arg0.append(" style=color:").append(getMHtmlTextColor()); arg0.append(" href=\""); if (str1 != null) massageText(arg0, str1); arg0.append("\""); str3 = localMatcher.group(4); if ((str3 == null) || (str3.toLowerCase().indexOf("target") == -1)) str3 = str3 + " target=\"_blank\""; arg0.append(str3).append(">"); str2 = localMatcher.group(5); if ((str2 != null) && (str2.length() > 0)) massageText(arg0, str2); arg0.append("</a>"); } massageText(arg0, getMText().substring(j, getMText().length())); } 
/*  1 */   protected void emitOpenMarkup_TrimField(FieldGraph.Node arg0, HTMLWriter arg1, TrimField arg2) { super.emitOpenMarkup(arg0, arg1); assert (isMInView()); arg1.openTag("div").attr("artype", getMDataTypeString()).attr("arsubtype", getMTrimType()).attr("ardbn", getMDBName()); if (getMEffect() == 4) setMAccess(2); StringBuilder localStringBuilder1 = new StringBuilder(); StringBuilder localStringBuilder2 = new StringBuilder(); localStringBuilder2.append(getSelectorClassNames()); localStringBuilder1.append("visibility:VISIBILITY_VALUE;"); if (getMZOrder() != -1L) localStringBuilder1.append("z-index:" + getMZOrder() + ";"); String str1 = getBackgroundColor(arg0); Box localBox = new Box(getMARBox().toBox()); localStringBuilder1.append(localBox.toCSS()); if (getMTrimType() == 3) { localStringBuilder1.append("background-color:").append(str1).append(";"); localStringBuilder2.append(" trimdiv"); arg1.attr("class", localStringBuilder2.toString()); arg1.attr("style", localStringBuilder1.toString()).endTag(); arg1.openTag("table"); arg1.attr("style", localBox.wholeChildBox().toCSS()).attr("class", "trimTable").attr("cellpadding", 0).attr("cellspacing", 0).endTag(true); arg1.openTag("tr").endTag(true); arg1.openTag("td").attr("valign", getMTextVAlign()); localStringBuilder1 = new StringBuilder(); if (getMTextColor() != null) localStringBuilder1.append("color:").append(getMTextColor()).append(';'); localStringBuilder2 = new StringBuilder(); localStringBuilder2.append(getMTextFont()); localStringBuilder2.append(" trimJust").append(getMTrimTextJustify()); if (getMAccess() == 3) localStringBuilder2.append(" disabled"); arg1.attr("style", localStringBuilder1.toString()); arg1.attr("class", localStringBuilder2.toString()); arg1.endTag(false); if (getMText() != null) { String str2 = FontTable.mapClassNameToFont(getMTextFont()); String str3 = "Header3".equals(str2) ? "H3" : "Header2".equals(str2) ? "H2" : "Header1".equals(str2) ? "H1" : null; HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(512)); if ((str3 != null) && (FormContext.get().IsVoiceAccessibleUser())) { localHTMLWriter.openTag(str3).attr("class", getMTextFont()).endTag(false); appendText(localHTMLWriter); arg1.append("NEW_LABEL"); arg1.closeTag(str3); } else { appendText(localHTMLWriter); arg1.append("NEW_LABEL"); } setMLabel(localHTMLWriter.toString()); } arg1.closeTag("td").closeTag("tr").closeTag("table"); } else { localStringBuilder2.append(" bs").append(getMEffect()); if (getMTrimType() == 2) localStringBuilder2.append(" trimBox"); localStringBuilder1.append("background-color:").append(str1).append(";"); if (getMBorderColor() != null) localStringBuilder1.append("border-color:").append(getMBorderColor()).append(";"); if (getMEffect() == 4) { localStringBuilder1.append("border-width:").append(2).append("px;"); } else { if (getMAccess() == 3) localStringBuilder2.append(" trimBorderDisabled"); if (getMTrimType() == 2) { localStringBuilder1.append("border-width:").append(getMLineWidth()).append("px;"); } else { localStringBuilder1.append("border-top-width:").append(getMLineWidth() / 2L).append("px;"); localStringBuilder1.append("border-left-width:").append(getMLineWidth() / 2L).append("px;"); localStringBuilder1.append("border-right-width:").append(getMLineWidth()).append("px;"); localStringBuilder1.append("border-bottom-width:").append(getMLineWidth()).append("px;"); }  } arg1.attr("class", localStringBuilder2.toString()); arg1.attr("style", localStringBuilder1.toString()).endTag(); }  } 
/*  1 */   protected void emitCloseMarkup_TrimField(FieldGraph.Node arg0, HTMLWriter arg1) { arg1.closeTag("div"); } 
/*  1 */   protected void emitTemplate_ControlField(FieldGraph.Node arg0, JSWriter arg1, ControlField arg2) { emitScriptProperties_ControlField(arg0, arg1, arg2); HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); if ((isMButtonTBL()) && (getMDisplayType() != 3)) { emitOpenMarkup_ControlField_Table(arg0, localHTMLWriter, arg2); arg1.property("btemplate", localHTMLWriter.toString()); } else { emitOpenMarkup_ControlField(arg0, localHTMLWriter, arg2); arg1.property("template", localHTMLWriter.toString()); }  } 
/*  1 */   protected void emitScriptProperties_ControlField(FieldGraph.Node arg0, JSWriter arg1, ControlField arg2) { init_ControlField(arg2); } 
/*  1 */   protected void init_ControlField(ControlField arg0) { if (getMFont() == null) setMFont(FontTable.mapFontToClassName("Default")); if (getMARBox() == null) setMInView(false); if (getMAccess() == 0) setMAccess(2); if (getMControlType() == 2) setMInView(false); else if (getMControlType() == 1) setMColour(getMHtmlColour());  } 
/*  1 */   protected void emitOpenMarkup_ControlField(FieldGraph.Node arg0, HTMLWriter arg1, ControlField arg2) { super.emitOpenMarkup(arg0, arg1); Box localBox1 = getMARBox().toBox(); StringBuilder localStringBuilder1 = new StringBuilder(); StringBuilder localStringBuilder2 = new StringBuilder(); String str1 = MessageTranslation.getLocalizedText(SessionData.get().getLocale(), "{0}, Disabled"); if (getMControlType() == 1) localStringBuilder2.append("btn btnurl "); else if (getMControlType() == 0) { if (getMAccess() == 3) { localStringBuilder2.append(isMImageFlat() ? "btnfltd " : "btn btn3d "); if (isMImageFlat()) if (getMImgBtnMouseoverEffect() == 2) localStringBuilder2.append(" toolbarBtnD "); else if (getMImgBtnMouseoverEffect() == 0) localStringBuilder2.append(" defaultCursor ");   } else { localStringBuilder2.append(isMImageFlat() ? "btnflt " : "btn btn3d "); if (isMImageFlat()) if (getMImgBtnMouseoverEffect() == 2) localStringBuilder2.append(" toolbarBtn "); else if (getMImgBtnMouseoverEffect() == 1) localStringBuilder2.append(" pointerCursor "); else if (getMImgBtnMouseoverEffect() == 0) localStringBuilder2.append(" defaultCursor ");   }  } else
/*  1 */       localStringBuilder2.append(isMImageFlat() ? "btnflt " : "btn btn3d "); if (this.columnField.getMImagePosition() == 2) localStringBuilder2.append(" btnrtimgd "); if (getMAccess() == 3) if ((getMDisabledImage() != null) && (isMImageFlat())) localStringBuilder2.append("btnd"); else localStringBuilder2.append(" btnd "); 
/*  1 */     localStringBuilder2.append(getSelectorClassNames()); localStringBuilder1.append(localBox1.toCSS()); if (getMColour() != null) localStringBuilder1.append("color:").append(getMColour()).append(";"); localStringBuilder1.append("visibility:VISIBILITY_VALUE;"); if (getMZOrder() != -1L) localStringBuilder1.append("z-index:" + getMZOrder() + ";"); if (isMTransparent()) localStringBuilder1.append("background-color:transparent;"); arg1.openTag("a").attr("href", "javascript:").attr("artype", getARType(arg2)).attr("ardbn", getMDBName()); String str2 = ""; String str3 = ""; if ((getMButtonText() != null) && (getMButtonText().length() > 0)) str2 = getMButtonText(); else if (getMLabel() != null) str2 = getMLabel(); else str2 = getMDBName(); str3 = str2; boolean bool = false; if ((getMControlType() == 0) && (getMImage() != null) && (getMImgButtonAltText() != null) && (getMImgButtonAltText().length() > 0)) { str3 = getMImgButtonAltText(); bool = true;
/*    */     }
/*  1 */     Object localObject1;
/*  1 */     if ((FormContext.get().IsVoiceAccessibleUser()) && (getMControlType() == 0) && (getMImage() == null)) { if (getMAccess() == 3) { localObject1 = new Object[] { str2 }; str2 = MessageTranslation.getLocalizedText(SessionData.get().getLocale(), str1, (Object[])localObject1); } arg1.attr("title", str2); } arg1.attr("class", localStringBuilder2.toString()); arg1.attr("style", "ROW_COLOR;" + localStringBuilder1.toString()).endTag(false); if ((getMControlType() == 0) && (getMImage() != null)) { localObject1 = placeQuadrants(); assert (localObject1.length == 3); Object localObject2 = localObject1[0]; Object localObject3 = localObject1[1]; Box localBox2 = localObject1[2]; assert ((localObject2 != null) && (localObject3 != null)); arg1.openTag("div").attr("class", "btnimgdiv"); arg1.attr("style", localObject2.toCSS()).endTag();
/*    */       Object[] arrayOfObject;
/*  1 */       if (getMDisabledImage() != null) { arg1.openTag("img").attr("src", getMDisabledImage().getUrl()); arg1.attr("id", "dis_img_" + getMFieldID()); arg1.condAttr(bool, "aralttxt", 1, 0); arg1.attr("artxt", str3); if (getMAccess() == 3) { arrayOfObject = new Object[] { str3 }; str3 = MessageTranslation.getLocalizedText(SessionData.get().getLocale(), str1, arrayOfObject); } arg1.attr("alt", str3); if (getMAccess() == 3) arg1.attr("class", "btnimg").attr("style", localObject3.toCSS() + " visibility: inherit;").closeOpenTag(); else arg1.attr("class", "btnimg").attr("style", localObject3.toCSS() + " visibility: hidden;").closeOpenTag(); arg1.openTag("img").attr("src", getMImage().getUrl()); arg1.attr("id", "reg_img_" + getMFieldID()); arg1.condAttr(bool, "aralttxt", 1, 0); str3 = str3.replace(str1, ""); arg1.attr("artxt", str3); arg1.attr("alt", str3); if (getMAccess() == 3) arg1.attr("class", "btnimg").attr("style", localObject3.toCSS() + " visibility: hidden;").closeOpenTag(); else arg1.attr("class", "btnimg").attr("style", localObject3.toCSS()).closeOpenTag();  } else { arg1.openTag("img").attr("src", getMImage().getUrl()); arg1.attr("id", "reg_img_" + getMFieldID()); arg1.condAttr(bool, "aralttxt", 1, 0); arg1.attr("artxt", str3); if (getMAccess() == 3) { arrayOfObject = new Object[] { str3 }; str3 = MessageTranslation.getLocalizedText(SessionData.get().getLocale(), str1, arrayOfObject); } arg1.attr("alt", str3); arg1.attr("title", str3); arg1.attr("class", "btnimg").attr("style", localObject3.toCSS()).closeOpenTag(); } arg1.closeTag("div"); if ((localBox2 != null) && (getMButtonText() != null)) emitCentredText(arg1, localBox2, true);  } else { emitCentredText(arg1, localBox1.wholeChildBox(), false); } arg1.closeTag("a"); } 
/*  1 */   protected void emitOpenMarkup_ControlField_Table(FieldGraph.Node arg0, HTMLWriter arg1, ControlField arg2) { super.emitOpenMarkup(arg0, arg1); StringBuilder localStringBuilder = new StringBuilder(); String str1 = MessageTranslation.getLocalizedText(SessionData.get().getLocale(), "{0}, Disabled"); if (arg2.getMControlType() == 1) localStringBuilder.append("btn btnurl"); else localStringBuilder.append(arg2.isMImageFlat() ? "btnflt" : "btn btn3d"); if (arg2.getMAccess() == 3) localStringBuilder.append(" btnd"); String str2 = ""; String str3 = ""; if ((arg2.getMButtonText() != null) && (arg2.getMButtonText().length() > 0)) str2 = arg2.getMButtonText(); else if (arg2.getMLabel() != null) str2 = arg2.getMLabel(); else str2 = arg2.getMDBName(); str3 = str2; boolean bool = false; arg1.openTag("input").attr("value", str2); if (arg2.getMControlType() == 0) { ControlField localControlField1 = arg2; if ((getMImage_aroundBody1$advice(this, localControlField1, ControlFieldAspect.aspectOf(), localControlField1, null) != null) && (arg2.getMImgButtonAltText() != null) && (arg2.getMImgButtonAltText().length() > 0)) { str3 = arg2.getMImgButtonAltText(); bool = true;
/*    */       }
/*    */     }
/*  1 */     Object[] arrayOfObject;
/*  1 */     if ((FormContext.get().IsVoiceAccessibleUser()) && (arg2.getMControlType() == 0)) { ControlField localControlField2 = arg2; if (getMImage_aroundBody3$advice(this, localControlField2, ControlFieldAspect.aspectOf(), localControlField2, null) == null) { if (arg2.getMAccess() == 3) { arrayOfObject = new Object[] { str2 }; str2 = MessageTranslation.getLocalizedText(SessionData.get().getLocale(), str1, arrayOfObject); } arg1.attr("title", str2); }  } if (arg2.getMControlType() == 0) { ControlField localControlField3 = arg2; if (getMImage_aroundBody5$advice(this, localControlField3, ControlFieldAspect.aspectOf(), localControlField3, null) != null) { localStringBuilder.append(" img"); arg1.attr("class", localStringBuilder.toString()); ControlField localControlField4 = arg2; arg1.attr("type", "image").attr("src", getMImage_aroundBody7$advice(this, localControlField4, ControlFieldAspect.aspectOf(), localControlField4, null).getUrl()); arg1.condAttr(bool, "aralttxt", 1, 0); arg1.attr("artxt", str3); if (arg2.getMAccess() == 3) { arrayOfObject = new Object[] { str3 }; str3 = MessageTranslation.getLocalizedText(SessionData.get().getLocale(), str1, arrayOfObject); } arg1.attr("alt", str3); arg1.attr("title", str3); break label476; }  } arg1.attr("class", localStringBuilder.toString()); arg1.attr("type", "button"); label476: arg1.endTag(false); } 
/*  1 */   protected void emitTemplate_NavBarItemField(FieldGraph.Node arg0, JSWriter arg1, NavBarItemField arg2) { emitScriptProperties_NavBarItemField(arg0, arg1, arg2); HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); emitOpenMarkup_NavBarItemField_Table(arg0, localHTMLWriter, arg2); if ((isMButtonTBL()) && (getMDisplayType() != 3)) arg1.property("btemplate", localHTMLWriter.toString()); else arg1.property("template", localHTMLWriter.toString());  } 
/*  1 */   protected void emitScriptProperties_NavBarItemField(FieldGraph.Node arg0, JSWriter arg1, NavBarItemField arg2) { init_ControlField(arg2); } 
/*  1 */   protected void init_ControlField(NavBarItemField arg0) { if (getMFont() == null) setMFont(FontTable.mapFontToClassName("Default")); if (getMARBox() == null) setMInView(false); if (getMAccess() == 0) setMAccess(2); if (getMControlType() == 2) setMInView(false); else if (getMControlType() == 1) setMColour(getMHtmlColour());  } 
/*  1 */   protected void emitOpenMarkup_NavBarItemField_Table(FieldGraph.Node arg0, HTMLWriter arg1, NavBarItemField arg2) { super.emitOpenMarkup(arg0, arg1); StringBuilder localStringBuilder = new StringBuilder(); String str1 = MessageTranslation.getLocalizedText(SessionData.get().getLocale(), "{0}, Disabled"); localStringBuilder.append("btn btnurl "); if (arg2.getMAccess() == 3) localStringBuilder.append(" btnd "); String str2 = ""; if (arg2.getMLabel() != null) str2 = arg2.getMLabel(); else str2 = arg2.getMDBName(); arg1.openTag("input").attr("value", str2); if (FormContext.get().IsVoiceAccessibleUser()) { if (arg2.getMAccess() == 3) { Object[] arrayOfObject = { str2 }; str2 = MessageTranslation.getLocalizedText(SessionData.get().getLocale(), str1, arrayOfObject); } arg1.attr("title", str2); } arg1.attr("class", localStringBuilder.toString()).endTag(false); } 
/*  1 */   private final void emitCentredText(HTMLWriter arg0, Box arg1, boolean arg2, ControlField arg3) { Box localBox = new Box(arg1); if (arg2) localBox.mW -= 2; if (localBox.mW < 0) localBox.mW = 0; String str = ""; if (arg3.getMControlType() == 1) if (arg3.getMTextJustify() == 1) str = "text-align:left;"; else if (arg3.getMTextJustify() == 4) str = "text-align:right;"; 
/*  1 */     arg0.openTag("div").attr("class", "btntextdiv").attr("style", localBox.toCSS()).endTag(false); arg0.openTag("div").attr("class", getMFont()).attr("style", str + ";width:" + localBox.mW + "px;").endTag(false); if (arg3.getMButtonText() != null) arg0.cdata(arg3.getMButtonText()); arg0.closeTag("div"); arg0.closeTag("div"); } 
/*  1 */   private final void emitCentredText(HTMLWriter arg0, Box arg1, boolean arg2) { Box localBox = new Box(arg1); if (arg2) localBox.mW -= 2; if (localBox.mW < 0) localBox.mW = 0; String str = ""; if (getMControlType() == 1) if (getMTextJustify() == 1) str = "text-align:left;"; else if (getMTextJustify() == 4) str = "text-align:right;"; 
/*  1 */     arg0.openTag("div").attr("class", "btntextdiv").attr("style", localBox.toCSS()).endTag(false); arg0.openTag("div").attr("class", getMFont()).attr("style", str + ";width:" + localBox.mW + "px;").endTag(false); if (getMButtonText() != null) { arg0.cdata("NEW_LABEL"); setMLabel(getMButtonText()); } arg0.closeTag("div"); arg0.closeTag("div"); } 
/*  1 */   protected void emitTemplate_EnumField(FieldGraph.Node arg0, JSWriter arg1, EnumField arg2) { emitScriptProperties_EnumField(arg0, arg1, arg2); HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); emitOpenMarkup_EnumField(arg0, localHTMLWriter, arg2); emitCloseMarkup_DataField(arg0, localHTMLWriter, arg2); arg1.property("template", localHTMLWriter.toString()); } 
/*  1 */   protected void emitScriptProperties_EnumField(FieldGraph.Node arg0, JSWriter arg1, EnumField arg2) { init_EnumField(arg2); super.emitScriptProperties(arg0, arg1); emitScriptProperties_DataField(arg0, arg1); arg1.append(",e:").openObj(); for (int i = 0; i < getMEnumLabels().length; i++) { if (i != 0) arg1.append(","); arg1.append(getMEnumIds()[i]).append(":"); arg1.openObj().property("v", getMEnumValues()[i]); arg1.property("l", getMEnumLabels()[i]).closeObj(); } arg1.closeObj(); arg1.property("et", getMEnumType()); } 
/*    */   protected void init_EnumField(EnumField arg0) { try { setMEnumLimitInfo((SelectionFieldLimit)arg0.getMEnumLimitInfo().clone()); assert (getMEnumLimitInfo() != null); int i = getMEnumLimitInfo().getListStyle(); setMIsCustom(i == 2); setMEnumValues((String[])arg0.getMEnumValues().clone()); setMEnumLabels((String[])arg0.getMEnumLabels().clone()); setMEnumIds((long[])arg0.getMEnumIds().clone()); if (getMLabelString() != null) { String[] arrayOfString = getMLabelString().split("\\\\"); if ((arrayOfString.length != getMEnumValues().length * 2 + 1) || (arrayOfString.length < 1)) MLog.fine("Enum label string possibly wrong length. The number of enum labels does not match the values length, so taking only those that are present:" + getMLabelString() + " != " + getMEnumValues().length + ":  Field: " + getMFieldID()); for (int j = 1; j < arrayOfString.length; j += 2) try { long l = Long.parseLong(arrayOfString[j]); int k = idToIndex(l); if ((k != 2147483647) && (k >= 0) && (k < getMEnumLabels().length) && (j + 1 < arrayOfString.length)) getMEnumLabels()[k] = arrayOfString[(j + 1)];  } catch (NumberFormatException localNumberFormatException) { MLog.warning("Corrupted enum label string: " + arrayOfString[j] + " --- using values instead: " + getMLabelString() + ": Field: " + getMFieldID()); }   }
/*  1 */       setMEnumType(0); if (getMRadioString() != null) if (getMRadioString().equals("1")) setMEnumType(1); else if (getMRadioString().equals("2")) setMEnumType(2); 
/*  1 */       setMEnumDefaultValue(arg0.getMDefaultValue()); if (getMRows() > getMEnumValues().length) setMRows(getMEnumValues().length); else if ((getMRows() == 0L) || (getMEnumType() == 2)) setMRows(1L);  } catch (CloneNotSupportedException localCloneNotSupportedException1) { MLog.fine("Clone not supported on EnumField method: init_enumField"); }  } 
/*  1 */   protected void emitOpenMarkup_EnumField(FieldGraph.Node arg0, HTMLWriter arg1, EnumField arg2) { emitOpenMarkup_DataField(arg0, arg1, arg2); Box localBox1 = getMDataARBox().toBox(); super.emitOpenMarkup(arg0, arg1); if (localBox1.mW <= 0) localBox1.mW = getMARBox().toBox().mW; if (localBox1.mH <= 0) localBox1.mH = getMARBox().toBox().mH; if ((getMEnumType() == 1) || (getMEnumType() == 2))
/*    */     {
/*  1 */       int j;
/*  1 */       if (getMRows() == 1L) { arg1.openTag("fieldset").attr("style", localBox1.toCSS()).endTag(); arg1.openTag("legend").attr("class", "hidden").endTag(false); if (FormContext.get().IsVoiceAccessibleUser()) { if ((getMAltText() != null) && (getMAltText().trim().length() > 0)) arg1.cdata(getMAltText()); else arg1.cdata(getMLabel());  } else if (getMLabel() != null) arg1.cdata(getMLabel()); arg1.closeTag("legend"); arg1.openTag("div").attr("class", "radio " + getMDataFont()).attr("style", "ROW_COLOR;" + localBox1.wholeChildBox().toCSS()).endTag(); boolean bool = TextDirStyleContext.get().isRTL(); for (j = 0; j < getMEnumValues().length; j++) { arg1.openTag("span"); if (bool) arg1.attr("dir", "rtl"); if ((j > 0) && (getMEnumType() == 2)) arg1.attr("style", "display:none"); arg1.endTag(false); arg1.openTag("input").attr("type", getMEnumType() == 1 ? "radio" : "checkbox").attr("name", "RCGroup" + getMFieldID()).append(" CHECKED" + j + " "); if (getMAccess() != 2) arg1.attr("disabled"); arg1.attr("value", getMEnumIds()[j]); String str2 = "rccc" + j + "id" + getMFieldID(); arg1.attr("id", str2); if (!getMEnumValues()[j].equals(getMEnumLabels()[j])) arg1.attr("arvalue", getMEnumValues()[j]); arg1.closeOpenTag(false); arg1.openTag("label").attr("for", str2).endTag(false); arg1.cdataSpaceEncoded(getMEnumLabels()[j]); arg1.closeTag("label", false); arg1.closeTag("span", false); } arg1.closeTag("div"); arg1.closeTag("fieldset"); } else { assert ((getMRows() > 0L) && (getMRows() <= getMEnumValues().length)); int i = (getMEnumValues().length + (int)getMRows() - 1) / (int)getMRows(); arg1.openTag("fieldset").attr("style", localBox1.toCSS()).endTag(false); arg1.openTag("legend").attr("class", "hidden").endTag(false); arg1.cdata(getMLabel()); arg1.closeTag("legend"); arg1.openTag("table").attr("class", "radio " + getMDataFont()).attr("cellpadding", 0).attr("cellspacing", 0).attr("style", "ROW_COLOR;" + localBox1.wholeChildBox().toCSS()).endTag(); int k = 0; for (j = 0; (j < getMRows()) && (k < getMEnumValues().length); j++) { for (arg1.openTag("tr").endTag(false); k < getMEnumValues().length; k % i == 0) { arg1.openTag("td"); if ((k > 0) && (getMEnumType() == 2)) arg1.attr("style", "display:none"); arg1.endTag(false); arg1.openTag("input").attr("type", getMEnumType() == 1 ? "radio" : "checkbox").attr("name", "RCGroup" + getMFieldID()).append(" CHECKED" + k + " "); if (getMAccess() != 2) arg1.attr("disabled"); arg1.attr("value", getMEnumIds()[k]); String str3 = "rc" + k + "id" + getMFieldID(); arg1.attr("id", str3); if (!getMEnumValues()[k].equals(getMEnumLabels()[k])) arg1.attr("arvalue", getMEnumValues()[k]); arg1.closeOpenTag(false); arg1.openTag("label").attr("for", str3).endTag(false); arg1.cdataSpaceEncoded(getMEnumLabels()[k]); arg1.closeTag("label", false); arg1.closeTag("td", false); k++; } if (j == 0) { arg1.openTag("td").attr("style", "width:100%;").endTag(false); arg1.closeTag("td", false); } arg1.closeTag("tr"); } if (j < getMRows()) arg1.openTag("tr").endTag(false).openTag("td").attr("style", "height:100%;").endTag(false).closeTag("td", true).closeTag("tr", true); arg1.closeTag("table"); arg1.closeTag("fieldset"); }  } else { assert (getMEnumType() == 0); arg1.openTag("div").attr("class", "selection" + (isMTextOnly() ? " dat" : "")).attr("style", "ROW_COLOR;" + localBox1.toCSS()); arg1.endTag(); arg1.openTag("input").attr("value", "STRING_VALUE").attr("id", "arid" + getMFieldID()).attr("type", "text").attr("class", "text " + getMDataFont() + (isMTextOnly() ? " dat" : "")).attr("readonly"); if (FormContext.get().IsVoiceAccessibleUser()) { arg1.attr("artitlecode", getDisplayTitleCodeForField(arg2)); if ((getMAltText() != null) && (getMAltText().trim().length() > 0)) arg1.attr("title", getLocalizedTitleForField(getMAltText())); else arg1.attr("title", getLocalizedTitleForField(getDisplayTitleForField(arg2)));  } Box localBox2 = new Box(localBox1); localBox2.mX = 0; localBox2.mY = 0; if (localBox2.mW > localBox2.mH) localBox2.mW -= localBox2.mH; arg1.attr("style", "ROW_COLOR;" + localBox2.toCSS()).closeOpenTag(); localBox2.mX += localBox2.mW; localBox2.mW = localBox2.mH; String str1 = null; if (getMEnumType() == 0) if (FormContext.get().IsVoiceAccessibleUser()) str1 = getLocalizedDescriptionStringForWidget("Selection menu for {0}"); else str1 = ""; 
/*  1 */       mSelectionButton.emitMarkup(arg1, localBox2, "selectionbtn", str1); arg1.closeTag("div"); }  } 
/*  1 */   protected void emitTemplate_CurrencyField(FieldGraph.Node arg0, JSWriter arg1, CurrencyField arg2) { emitScriptProperties_CurrencyField(arg0, arg1, arg2); HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); emitOpenMarkup_CurrencyField(arg0, localHTMLWriter, arg2); emitCloseMarkup_DataField(arg0, localHTMLWriter, arg2); arg1.property("template", localHTMLWriter.toString()); } 
/*  1 */   protected void emitScriptProperties_CurrencyField(FieldGraph.Node arg0, JSWriter arg1, CurrencyField arg2) { super.emitScriptProperties(arg0, arg1); emitScriptProperties_DataField(arg0, arg1); arg1.property("p", arg2.getMPrecision()); if (arg2.getMAllowable().length > 0) { localJSWriter = new JSWriter(); localJSWriter.openObj(); for (i = 0; i < arg2.getMAllowable().length; i++) { localJSWriter.property(arg2.getMAllowable()[i].getCurrencyCode(), arg2.getMAllowable()[i].getPrecision()); if (i == 0) arg1.property("d", arg2.getMAllowable()[i].getCurrencyCode());  } localJSWriter.closeObj(); arg1.property("a", localJSWriter); } JSWriter localJSWriter = new JSWriter(); localJSWriter.openObj(); for (int i = 0; i < arg2.getMFunctional().length; i++) localJSWriter.property(arg2.getMFunctional()[i].getCurrencyCode(), arg2.getMFunctional()[i].getPrecision()); localJSWriter.closeObj(); arg1.property("f", localJSWriter); if ((getMInitialCode() != null) && (getMInitialCode().length() > 0)) arg1.property("ic", getMInitialCode()); arg1.property("min", arg2.getMMin().toString()); arg1.property("max", arg2.getMMax().toString()); } 
/*  1 */   protected void emitOpenMarkup_CurrencyField(FieldGraph.Node arg0, HTMLWriter arg1, CurrencyField arg2) { setMPrecision(arg2.getMPrecision()); setMFunctional(arg2.getMFunctional()); setMAllowable(arg2.getMAllowable()); setMDefaultCurrency(arg2.getMDefaultCurrency()); setMDefaultCode(arg2.getMDefaultCode()); setMHaveDefault(arg2.isMHaveDefault()); emitOpenMarkup_DataField(arg0, arg1, arg2); arg1.openTag("input").attr("value", "STRING_VALUE").attr("id", "arid" + getMFieldID()).attr("class", "currency " + getMDataFont() + (isMTextOnly() ? " dat" : "")).attr("type", "text").attr("style", "ROW_COLOR;" + getMDataARBox().toBox().toCSS()); if ((FormContext.get().IsVoiceAccessibleUser()) && (getMAltText() != null) && (getMAltText().trim().length() > 0)) arg1.attr("title", getMAltText()); if (getMAccess() == 3) arg1.attr("disabled"); if ((getMAccess() == 1) || (isMTextOnly())) arg1.attr("readonly"); arg1.attr("arprecision", arg2.getMPrecision()); arg1.attr("armin", arg2.getMMin().toString()); arg1.attr("armax", arg2.getMMax().toString()); if (FormContext.get().IsVoiceAccessibleUser()) { arg1.attr("artitlecode", getDisplayTitleCodeForField(arg2)); arg1.attr("title", getLocalizedTitleForField(getDisplayTitleForField(arg2))); } JSWriter localJSWriter = new JSWriter(); localJSWriter.openList(); for (int i = 0; i < arg2.getMAllowable().length; i++) { localJSWriter.listSep().openObj(); String str = arg2.getMAllowable()[i].getCurrencyCode(); localJSWriter.property("v", str); localJSWriter.property("p", arg2.getMAllowable()[i].getPrecision()); if (str.equalsIgnoreCase(arg2.getMDefaultCurrency())) localJSWriter.property("d", "1"); localJSWriter.closeObj(); } localJSWriter.closeList(); arg1.attr("arallowablecur", localJSWriter.toString()); localJSWriter = new JSWriter(); localJSWriter.openList(); for (i = 0; i < arg2.getMFunctional().length; i++) { localJSWriter.listSep().openObj(); localJSWriter.property("v", arg2.getMFunctional()[i].getCurrencyCode()); localJSWriter.property("p", arg2.getMFunctional()[i].getPrecision()); localJSWriter.closeObj(); } localJSWriter.closeList(); arg1.attr("arfunctionalcur", localJSWriter.toString()); if ((getMInitialCode() != null) && (getMInitialCode().length() > 0)) arg1.attr("ic", getMInitialCode()); arg1.closeOpenTag(); } 
/*  1 */   protected void emitTemplate_TimeOfDayField(FieldGraph.Node arg0, JSWriter arg1, TODField arg2) { HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); emitOpenMarkup_TimeOfDayField(arg0, localHTMLWriter, arg2); emitCloseMarkup_DataField(arg0, localHTMLWriter, arg2); arg1.property("template", localHTMLWriter.toString()); } 
/*  1 */   protected void emitOpenMarkup_TimeOfDayField(FieldGraph.Node arg0, HTMLWriter arg1, TODField arg2) { emitOpenMarkup_DataField(arg0, arg1, arg2); arg1.openTag("input").attr("value", "STRING_VALUE").attr("id", "arid" + getMFieldID()).attr("class", "text " + getMDataFont() + (isMTextOnly() ? " dat" : "")).attr("type", "text").attr("style", "ROW_COLOR;" + getMDataARBox().toBox().toCSS()); if ((FormContext.get().IsVoiceAccessibleUser()) && (getMAltText() != null) && (getMAltText().trim().length() > 0)) arg1.attr("title", getMAltText()); if (getMAccess() == 3) arg1.attr("disabled"); if ((getMAccess() == 1) || (isMTextOnly())) arg1.attr("readonly"); arg1.closeOpenTag(); } 
/*  1 */   protected void emitTemplate_TimeField(FieldGraph.Node arg0, JSWriter arg1, TimeField arg2) { HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); emitOpenMarkup_TimeField(arg0, localHTMLWriter, arg2); emitCloseMarkup_DataField(arg0, localHTMLWriter, arg2); arg1.property("template", localHTMLWriter.toString()); } 
/*  1 */   protected void emitOpenMarkup_TimeField(FieldGraph.Node arg0, HTMLWriter arg1, TimeField arg2) { emitOpenMarkup_DataField(arg0, arg1, arg2); arg1.openTag("input").attr("value", "STRING_VALUE").attr("id", "arid" + getMFieldID()).attr("class", "text " + getMDataFont() + (isMTextOnly() ? " dat" : "")).attr("type", "text").attr("style", "ROW_COLOR;" + getMDataARBox().toBox().toCSS()); if ((FormContext.get().IsVoiceAccessibleUser()) && (getMAltText() != null) && (getMAltText().trim().length() > 0)) arg1.attr("title", getMAltText()); if (getMAccess() == 3) arg1.attr("disabled"); if ((getMAccess() == 1) || (isMTextOnly())) arg1.attr("readonly"); arg1.attr("ds", getMDateTimePopup()); arg1.closeOpenTag(); } 
/*  1 */   protected void emitTemplate_DateField(FieldGraph.Node arg0, JSWriter arg1, DateField arg2) { HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); emitOpenMarkup_DateField(arg0, localHTMLWriter, arg2); emitCloseMarkup_DataField(arg0, localHTMLWriter, arg2); arg1.property("template", localHTMLWriter.toString()); } 
/*  1 */   protected void emitOpenMarkup_DateField(FieldGraph.Node arg0, HTMLWriter arg1, DateField arg2) { emitOpenMarkup_DataField(arg0, arg1, arg2); arg1.openTag("input").attr("value", "STRING_VALUE").attr("id", "arid" + getMFieldID()).attr("class", "text " + getMDataFont() + (isMTextOnly() ? " dat" : "")).attr("type", "text").attr("style", "ROW_COLOR;" + getMDataARBox().toBox().toCSS()); if ((FormContext.get().IsVoiceAccessibleUser()) && (getMAltText() != null) && (getMAltText().trim().length() > 0)) arg1.attr("title", getMAltText()); if (getMAccess() == 3) arg1.attr("disabled"); if ((getMAccess() == 1) || (isMTextOnly())) arg1.attr("readonly"); arg1.closeOpenTag(); } 
/*  1 */   protected void emitTemplate_RealField(FieldGraph.Node arg0, JSWriter arg1, RealField arg2) { emitScriptProperties_RealField(arg0, arg1, arg2); HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); emitOpenMarkup_RealField(arg0, localHTMLWriter, arg2); emitCloseMarkup_DataField(arg0, localHTMLWriter, arg2); arg1.property("template", localHTMLWriter.toString()); } 
/*  1 */   protected void emitScriptProperties_RealField(FieldGraph.Node arg0, JSWriter arg1, RealField arg2) { arg1.property("p", arg2.getMPrecision()); arg1.property("min", new Double(arg2.getMMin()).toString()); arg1.property("max", new Double(arg2.getMMax()).toString()); } 
/*  1 */   protected void emitOpenMarkup_RealField(FieldGraph.Node arg0, HTMLWriter arg1, RealField arg2) { emitOpenMarkup_DataField(arg0, arg1, arg2); arg1.openTag("input").attr("value", "STRING_VALUE").attr("id", "arid" + getMFieldID()).attr("class", "text " + getMDataFont() + (isMTextOnly() ? " dat" : "")).attr("type", "text").attr("style", "ROW_COLOR;" + getMDataARBox().toBox().toCSS()); if ((FormContext.get().IsVoiceAccessibleUser()) && (getMAltText() != null) && (getMAltText().trim().length() > 0)) arg1.attr("title", getMAltText()); if (getMAccess() == 3) arg1.attr("disabled"); if ((getMAccess() == 1) || (isMTextOnly())) arg1.attr("readonly"); arg1.attr("arprecision", getMPrecision()); arg1.attr("armin", new Double(getMMin()).toString()); arg1.attr("armax", new Double(getMMax()).toString()); arg1.closeOpenTag(); } 
/*  1 */   protected void emitTemplate_DecimalField(FieldGraph.Node arg0, JSWriter arg1, DecimalField arg2) { emitScriptProperties_DecimalField(arg0, arg1, arg2); HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); emitOpenMarkup_DecimalField(arg0, localHTMLWriter, arg2); emitCloseMarkup_DataField(arg0, localHTMLWriter, arg2); arg1.property("template", localHTMLWriter.toString()); } 
/*  1 */   protected void emitScriptProperties_DecimalField(FieldGraph.Node arg0, JSWriter arg1, DecimalField arg2) { arg1.property("p", arg2.getMPrecision()); arg1.property("min", arg2.getMMin().toString()); arg1.property("max", arg2.getMMax().toString()); } 
/*  1 */   protected void emitOpenMarkup_DecimalField(FieldGraph.Node arg0, HTMLWriter arg1, DecimalField arg2) { emitOpenMarkup_DataField(arg0, arg1, arg2); arg1.openTag("input").attr("value", "STRING_VALUE").attr("id", "arid" + getMFieldID()).attr("class", "decimal " + getMDataFont() + (isMTextOnly() ? " dat" : "")).attr("type", "text").attr("style", "ROW_COLOR;" + getMDataARBox().toBox().toCSS()); if ((FormContext.get().IsVoiceAccessibleUser()) && (getMAltText() != null) && (getMAltText().trim().length() > 0)) arg1.attr("title", getMAltText()); if (getMAccess() == 3) arg1.attr("disabled"); if ((getMAccess() == 1) || (isMTextOnly())) arg1.attr("readonly"); arg1.attr("arprecision", getMPrecision()); arg1.attr("armin", arg2.getMMin().toString()); arg1.attr("armax", arg2.getMMax().toString()); arg1.closeOpenTag(); } 
/*  1 */   protected void emitTemplate_IntegerField(FieldGraph.Node arg0, JSWriter arg1, IntegerField arg2) { emitScriptProperties_IntegerField(arg0, arg1, arg2); HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); emitOpenMarkup_IntegerField(arg0, localHTMLWriter, arg2); emitCloseMarkup_DataField(arg0, localHTMLWriter, arg2); arg1.property("template", localHTMLWriter.toString()); } 
/*  1 */   protected void emitScriptProperties_IntegerField(FieldGraph.Node arg0, JSWriter arg1, IntegerField arg2) { if (arg2.getMMin() != -2147483647L) arg1.property("min", arg2.getMMin()); if (arg2.getMMax() != 2147483647L) arg1.property("max", arg2.getMMax());  } 
/*  1 */   protected void emitOpenMarkup_IntegerField(FieldGraph.Node arg0, HTMLWriter arg1, IntegerField arg2) { emitOpenMarkup_DataField(arg0, arg1, arg2); setMMin(arg2.getMMin()); setMMax(arg2.getMMax()); setMDefault(arg2.getMDefault()); setMHaveDefault(arg2.isMHaveDefault()); Box localBox1 = getMDataARBox().toBox(); arg1.openTag("div").attr("class", "integer" + (isMTextOnly() ? " dat" : "")).attr("style", localBox1.toCSS()).endTag(); arg1.openTag("input").attr("value", "STRING_VALUE").attr("id", "arid" + getMFieldID()).attr("class", "text " + getMDataFont() + (isMTextOnly() ? " dat" : "")).attr("type", "text"); if ((FormContext.get().IsVoiceAccessibleUser()) && (getMAltText() != null) && (getMAltText().trim().length() > 0)) arg1.attr("title", getMAltText()); if (getMMin() != -2147483647L) arg1.attr("armin", getMMin()); if (getMMax() != 2147483647L) arg1.attr("armax", getMMax()); if (getMAccess() == 3) arg1.attr("disabled"); if ((getMAccess() == 1) || (isMTextOnly())) arg1.attr("readonly"); if (isMSpinner()) arg1.attr("arspinner", 1); Box localBox2 = new Box(localBox1); localBox2.mX = 0; localBox2.mY = 0; if ((isMSpinner()) && (localBox2.mW > 16)) localBox2.mW -= 16; arg1.attr("style", "ROW_COLOR;" + localBox2.toCSS()); arg1.closeOpenTag(); if ((isMSpinner()) && (!FormContext.get().IsVoiceAccessibleUser())) { localBox2.mX += localBox2.mW; localBox2.mW = 16; int i = localBox2.mH; localBox2.mH = ((localBox2.mH - 1) / 2); String str1 = getLocalizedDescriptionStringForWidget("increment"); String str2 = getLocalizedDescriptionStringForWidget("decrement"); ColumnField.mSpinnerUp.emitMarkup(arg1, localBox2, "spinnerup", str1); localBox2.mY += localBox2.mH; localBox2.mH = (i - localBox2.mH - 1); ColumnField.mSpinnerDown.emitMarkup(arg1, localBox2, "spinnerdown", str2); } arg1.closeTag("div"); } 
/*  1 */   protected void emitTemplate_CharField(FieldGraph.Node arg0, JSWriter arg1, CharField arg2) { HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(262144)); emitOpenMarkup_CharField(arg0, localHTMLWriter, arg2); emitCloseMarkup_DataField(arg0, localHTMLWriter, arg2); arg1.property("template", localHTMLWriter.toString()); } 
/*  1 */   protected void emitOpenMarkup_CharField(FieldGraph.Node arg0, HTMLWriter arg1, CharField arg2) { emitOpenMarkup_DataField(arg0, arg1, arg2); setMMaxLength(arg2.getMMaxLength()); setMMenuStyle(arg2.getMMenuStyle()); setMQBEMatch(arg2.getMQBEMatch()); setMCharMenu(arg2.getMCharMenu()); setMCharPattern(arg2.getMCharPattern()); setMFullTextOption(arg2.getMFullTextOption()); if (isMDropDownList()) { setMMenuStyle(2); getMMenuARBox().setW(100); } if ((arg2.getMFieldID() == 102L) || (arg2.getMFieldID() == 123L)) setMMasked(true); if (getMRows() <= 0L) setMRows(1L); if (getMCharMenu() == null) { int i = getMFieldID(); setMCharMenu(GroupMenu.getMenuName(i)); if ((getMCharMenu() != null) && (getMCharMenu() != "")) { setMIsGroupMenu(true);
/*    */         try { Menu.get(new Menu.MKey(getMLForm().getServerName(), SessionData.get().getLocale(), getMCharMenu(), getMLForm().getAppName())); } catch (GoatException localGoatException) { localGoatException.printStackTrace(); } setMMenuStyle(1);
/*    */         try { if ((Group.isMultiAssignField(i)) && (!ServerInfo.get(getMLForm().getServerName()).isMultiAssignGroup())) setMMenuStyle(2);
/*    */         }
/*    */         catch (GoatException localGoatException1)
/*    */         {
/*    */         }
/*    */       }
/*    */     }
/*  1 */     String str1;
/*    */     String str2;
/*  1 */     if (isMMasked()) { str1 = "input"; localGoatException1 = "password"; str2 = "text"; } else if (isMRichTextField()) { str1 = "div"; str2 = getMRows() == 1L ? "text sr " : "text "; str2 = str2 + "rtf "; localGoatException1 = null; } else { str1 = "textarea"; localGoatException1 = null; str2 = getMRows() == 1L ? "text sr " : "text "; } arg1.openTag(str1).attr("class", str2 + getMDataFont() + (isMTextOnly() ? " dat" : "")); if (!isMMasked()) if (getMRows() == 1L) arg1.attr("wrap", "off"); else arg1.attr("wrap", "soft"); 
/*  1 */     if ((isMRichTextField()) && (getMAttachmentFieldID() > 0)) arg1.attr("arpool", Integer.toString(getMAttachmentFieldID())); arg1.attr("id", "arid" + getMFieldID()); if (str1.equals("textarea")) arg1.attr("cols", "20"); if (isMRichTextFieldAdv()) arg1.attr("artf", "1"); arg1.attr("maxlen", getMMaxLength()); if (FormContext.get().IsVoiceAccessibleUser()) { arg1.attr("artitlecode", getDisplayTitleCodeForField(arg2)); if ((getMAltText() != null) && (getMAltText().trim().length() > 0)) arg1.attr("title", getLocalizedTitleForField(getMAltText())); else arg1.attr("title", getLocalizedTitleForField(getDisplayTitleForField(arg2)));  } if (localGoatException1 != null) arg1.attr("type", localGoatException1); Box localBox = getMDataARBox().toBox(); if (isMDropDownList()) { localBox.mW -= localBox.mH - 2; if (localBox.mW < 0) localBox.mW = 0;  } arg1.attr("style", "ROW_COLOR;" + localBox.toCSS() + (isMRichTextField() ? ";overflow:auto;background-color:#fff;padding-left:0px;padding-right:0px;padding-top:0px;padding-bottom:0px;" : "")); if (getMCharMenu() != null) { arg1.attr("armenu", getMCharMenu()); if (getMMenuStyle() == 2) arg1.attr("mstyle", getMMenuStyle());  } if (getMAccess() == 3) arg1.attr("disabled"); if ((getMAccess() == 1) || (isMTextOnly()) || (isMDropDownList())) arg1.attr("readonly"); if (isMDropDownList()) arg1.attr("mdd", 1); if (getMAutoCompleteStyle() > 0) arg1.attr("arautoc", getMAutoCompleteStyle()); if (getMAutoCompleteMatchBy() > 0) arg1.attr("arautocmb", getMAutoCompleteMatchBy()); if (localGoatException1 == null) { arg1.attr("rows", getMRows()); arg1.endTag(false); arg1.append("STRING_VALUE"); arg1.closeTag(str1); } else { assert (str1.equals("input")); arg1.attr("value", "STRING_VALUE").closeOpenTag(); }  } 
/*  1 */   protected void emitOpenMarkup_DataField(FieldGraph.Node arg0, HTMLWriter arg1, GoatField arg2) { Box localBox1 = getMARBox().toBox(); Box localBox2 = getMLabelARBox().toBox(); StringBuilder localStringBuilder1 = new StringBuilder(); StringBuilder localStringBuilder2 = new StringBuilder(); arg1.openTag("div").attr("artype", getARType(arg2)).attr("ardbn", getMDBName()); if (isMDisableChange()) arg1.attr("ardcf", 1); if (isMHighlight()) { arg1.attr("hlight"); if ((getMHighlightStartColor() != null) && (!getMHighlightStartColor().equals("#000000"))) arg1.attr("hColorS", getMHighlightStartColor()); if ((getMHighlightEndColor() != null) && (!getMHighlightEndColor().equals("#000000"))) arg1.attr("hColorE", getMHighlightEndColor());  } localStringBuilder1.append("df "); if (getMAccess() == 1) localStringBuilder1.append(" dfro "); else if (getMAccess() == 3) localStringBuilder1.append(" dfd "); localStringBuilder1.append(getSelectorClassNames()); arg1.attr("class", localStringBuilder1.toString() + " " + getARType(arg2)); assert (getMAccess() != 0); localStringBuilder2.append("visibility:VISIBILITY_VALUE;"); if (getMZOrder() != -1L) localStringBuilder2.append("z-index:" + getMZOrder() + ";"); localStringBuilder2.append(localBox1.toCSS()); arg1.attr("style", "ROW_COLOR;" + localStringBuilder2.toString()); arg1.endTag(); if (getMLabelAlign() == 4) { arg1.openTag("span"); arg1.attr("style", localBox2.toCSS()); arg1.endTag(false); } localStringBuilder1 = new StringBuilder(); localStringBuilder2 = new StringBuilder(); arg1.openTag("label"); localStringBuilder1.append("label "); localStringBuilder1.append(getMLabelFont()); if (getMFieldOption() == 4) localStringBuilder1.append(" do"); arg1.attr("class", localStringBuilder1.toString()); arg1.attr("for", getForCodePrefix_DataField(arg2) + getMFieldID()); if (getMLabelAlign() == 4) { int i = localBox1.mH - (localBox2.mY + localBox2.mH); localStringBuilder2.append("width:").append(localBox2.mW).append("px;left:0px;bottom:").append(i).append("px;"); } else { localStringBuilder2.append(localBox2.toCSS()); } if (getMLabelColour() != null) localStringBuilder2.append("color:").append(getMLabelColour()).append(";"); if (getMLabelJustify() == 2) localStringBuilder2.append("text-align:center;"); else if (getMLabelJustify() == 4) localStringBuilder2.append("text-align:right;"); if (getMLabelAlign() == 2) localStringBuilder2.append("line-height:" + (localBox2.mH + 1) + "px;"); arg1.attr("style", localStringBuilder2.toString()).endTag(false); arg1.cdata("NEW_LABEL"); arg1.closeTag("label", false); if (getMLabelAlign() == 4) arg1.closeTag("span", false);  } 
/*  1 */   protected void emitCloseMarkup_DataField(FieldGraph.Node arg0, HTMLWriter arg1, GoatField arg2) { if ((getMFileUploadARBox() != null) && (getMFileUploadARBox().getW() > 0)) emitFileUploadBox(arg1, arg2); int i = 0; if ((arg2 instanceof ColumnField)) { ColumnField localColumnField = (ColumnField)arg2; i = (localColumnField.isMAutoCompleteHideMenuButton()) && (localColumnField.getMDisplayType() != 1) ? 1 : 0; } if ((i == 0) && (getMMenuARBox() != null) && (getMMenuARBox().getW() > 0)) emitMenuBox(arg1, arg2); if ((getMExpandARBox() != null) && (getMExpandARBox().getW() > 0)) emitExpandBox(arg1, arg2); arg1.closeTag("div"); } 
/*  1 */   protected void emitScriptProperties_DataField(FieldGraph.Node arg0, JSWriter arg1) { if ((isMDisableChange()) || ((!isMInView()) && (getMARBox() == null))) arg1.property("dcf", 1);  } 
/*  1 */   protected void emitDefaults_ControlField(FieldGraph.Node arg0, JSWriter arg1) { arg1.property("a", getMAccess()); if (getMFont() != null) arg1.property("f", getMFont()); arg1.property("l", getMButtonText() == null ? "" : getMButtonText()); if (getMColour() != null) arg1.property("c", getMColour());  } 
/*  1 */   protected void emitDefaults_TrimField(FieldGraph.Node arg0, JSWriter arg1) { arg1.property("a", getMAccess()); if (getMTextFont() != null) arg1.property("f", getMTextFont()); if (getMText() == null) { arg1.property("l", ""); } else { HTMLWriter localHTMLWriter = new HTMLWriter(new StringBuilder(512)); appendText(localHTMLWriter); arg1.property("l", localHTMLWriter.toString()); } if (getMTextColor() != null) arg1.property("c", getMTextColor());  } 
/*  1 */   protected void emitDefaults_DataField(FieldGraph.Node arg0, JSWriter arg1) { arg1.property("a", getMAccess()); if (getMLabelFont() != null) arg1.property("f", getMLabelFont()); if (getMLabelColour() != null) arg1.property("c", getMLabelColour());  } 
/*  1 */   protected void emitFileUploadBox(HTMLWriter arg0, GoatField arg1) { String str = getExpandBoxAltText(arg1); GoatImageButton localGoatImageButton = getFileUploadButton(); if (localGoatImageButton != null) localGoatImageButton.emitMarkup(arg0, getMFileUploadARBox().toBox(), getFileUploadClassString(), str);  } 
/*  1 */   protected void emitExpandBox(HTMLWriter arg0, GoatField arg1) { String str = getExpandBoxAltText(arg1); GoatImageButton localGoatImageButton = getExpandButton(arg1); if (localGoatImageButton != null) localGoatImageButton.emitMarkup(arg0, getMExpandARBox().toBox(), getExpandBoxClassesString(), str);  } 
/*  1 */   protected void emitMenuBox(HTMLWriter arg0, Box arg1, boolean arg2) { String str = getLocalizedDescriptionStringForWidget("Menu for {0}"); ColumnField.MMenuButton.emitMarkup(arg0, arg1, "menu", str, arg2); } 
/*  1 */   protected void emitMenuBox(HTMLWriter arg0, GoatField arg1) { if (DataType.CHAR.equals(arg1.getMDataType())) { if (getMCharMenu() != null) { Box localBox1 = getMMenuARBox().toBox(); if (isMDropDownList()) { Box localBox2 = getMDataARBox().toBox(); localBox2.mW -= localBox2.mH - 2; if (localBox2.mW < 0) { localBox1.mW = 0; } else { localBox1.mX = (localBox2.mX + localBox2.mW - 2); localBox1.mY = localBox2.mY; localBox1.mH = (localBox1.mW = localBox2.mH); }  } emitMenuBox(arg0, localBox1, getMCharMenu().equals("$NULL$")); } } else emitMenuBox(arg0, getMMenuARBox().toBox(), false);  } 
/*  1 */   protected GoatField getAssociatedField(FieldGraph.Node arg0) { if (arg0 == null) return null; GoatField localGoatField = null; Form localForm = null; Form.ViewInfo localViewInfo = null; FieldGraph localFieldGraph = null; ColumnField localColumnField = (ColumnField)arg0.mField;
/*    */     try { localFieldGraph = arg0.getParentFieldGraph(); if (localColumnField.isMFromLocalForm()) { localGoatField = localFieldGraph.getField(localColumnField.getMDataFieldID()); } else { TableField localTableField = (TableField)localFieldGraph.getField(localColumnField.getMParentFieldID()); if (localTableField == null) return null; String str1 = localTableField.getSampleServer(); String str2 = localTableField.getSampleSchema(); if ((str1 == null) || (str1.trim().equals("")) || (str1.equals("@"))) str1 = (localTableField.getMServer().equals("@")) || (FIELD_PROTOCOL_PATTERN.matcher(localTableField.getMServer()).matches()) ? localColumnField.getServer() : localTableField.getMServer(); if ((str2 == null) || (str2.trim().equals("")) || (str2.equals("@"))) str2 = (localTableField.getMSchema().equals("@")) || (FIELD_PROTOCOL_PATTERN.matcher(localTableField.getMSchema()).matches()) ? localColumnField.getMLForm().getFormName() : localTableField.getMSchema(); localForm = Form.get(str1, str2); localViewInfo = localForm.getViewInfoByInference(null, false, false); localFieldGraph = FieldGraph.get(localViewInfo); localGoatField = localFieldGraph.getField(localColumnField.getMDataFieldID()); }  } catch (GoatException localGoatException1) {  }
/*  1 */     return localGoatField; } 
/*  1 */   public void emitDefaults(FieldGraph.Node arg0, JSWriter arg1) { super.emitDefaults(arg0, arg1); arg1.property("l", getMLabel() == null ? "" : getMLabel()); arg1.property("v", isMVisible()); if (getMDisplayType() == 3) { GoatField localGoatField = getAssociatedField(arg0); if (localGoatField != null) if (DataType.TRIM.equals(localGoatField.getMDataType())) { emitDefaults_TrimField(arg0, arg1); } else if (DataType.CONTROL.equals(localGoatField.getMDataType())) { emitDefaults_ControlField(arg0, arg1); } else { emitDefaults_DataField(arg0, arg1); if (DataType.CHAR.equals(localGoatField.getMDataType())) arg1.property("m", ((CharField)localGoatField).getMCharMenu());  } 
/*  1 */       if ((getMDefaultValue() != null) && (!getMDefaultValue().equals(""))) arg1.property("d", getMDefaultValue()); arg1.property("a", getMAccess()); }  } 
/*  1 */   protected int getMWidth() { return getColumnField().getMWidth(); } 
/*  1 */   protected int getMOrder() { return getColumnField().getMOrder(); } 
/*  1 */   protected int getMSortDir() { return getColumnField().getMSortDir(); } 
/*  1 */   protected int getMSortSeq() { return getColumnField().getMSortSeq(); } 
/*  1 */   protected int getMDataFieldID() { return getColumnField().getMDataFieldID(); } 
/*  1 */   protected boolean isMFromLocalForm() { return getColumnField().isMFromLocalForm(); } 
/*  1 */   protected int getMAccess() { return getColumnField().getMAccess(); } 
/*  1 */   protected int getMDisplayType() { return getColumnField().getMDisplayType(); } 
/*  1 */   protected boolean isMWrapText() { return getColumnField().isMWrapText(); } 
/*  1 */   protected String getMDefaultValue() { return getColumnField().getMDefaultValue(); } 
/*  1 */   protected int getMColumnLength() { return getColumnField().getMColumnLength(); } 
/*  1 */   protected String getMHighlightEndColor() { return getColumnField().getMHighlightEndColor(); } 
/*  1 */   protected String getMHighlightStartColor() { return getColumnField().getMHighlightStartColor(); } 
/*  1 */   protected String getMDataFont() { return getColumnField().getMDataFont(); } 
/*  1 */   protected String getMLabelColour() { return getColumnField().getMLabelColour(); } 
/*  1 */   protected String getMLabelFont() { return getColumnField().getMLabelFont(); } 
/*  1 */   protected int getMLabelJustify() { return getColumnField().getMLabelJustify(); } 
/*  1 */   protected int getMLabelAlign() { return getColumnField().getMLabelAlign(); } 
/*  1 */   protected long getMCols() { return getColumnField().getMCols(); } 
/*  1 */   protected long getMRows() { return getColumnField().getMRows(); } 
/*  1 */   protected boolean isMDisableChange() { return getColumnField().isMDisableChange(); } 
/*  1 */   protected boolean isMTextOnly() { return getColumnField().isMTextOnly(); } 
/*  1 */   protected boolean isMHighlight() { return getColumnField().isMHighlight(); } 
/*  1 */   protected ARBox getMFileUploadARBox() { return getColumnField().getMFileUploadARBox(); } 
/*  1 */   protected ARBox getMMenuARBox() { return getColumnField().getMMenuARBox(); } 
/*  1 */   protected ARBox getMExpandARBox() { return getColumnField().getMExpandARBox(); } 
/*  1 */   protected ARBox getMDataARBox() { return getColumnField().getMDataARBox(); } 
/*  1 */   protected ARBox getMLabelARBox() { return getColumnField().getMLabelARBox(); } 
/*  1 */   protected int getMMaxLength() { return getColumnField().getMMaxLength(); } 
/*  1 */   protected int getMMenuStyle() { return getColumnField().getMMenuStyle(); } 
/*  1 */   protected int getMAutoCompleteStyle() { return getColumnField().getMAutoCompleteStyle(); } 
/*  1 */   protected int getMAutoCompleteMatchBy() { return getColumnField().getMAutoCompleteMatchBy(); } 
/*  1 */   protected int getMQBEMatch() { return getColumnField().getMQBEMatch(); } 
/*  1 */   protected String getMCharMenu() { return getColumnField().getMCharMenu(); } 
/*  1 */   protected String getMCharPattern() { return getColumnField().getMCharPattern(); } 
/*  1 */   protected int getMFullTextOption() { return getColumnField().getMFullTextOption(); } 
/*  1 */   protected boolean isMMasked() { return getColumnField().isMMasked(); } 
/*  1 */   protected boolean isMRichTextField() { return getColumnField().isMRichTextField(); } 
/*  1 */   protected boolean isMRichTextFieldAdv() { return getColumnField().isMRichTextFieldAdv(); } 
/*  1 */   protected boolean isMDropDownList() { return getColumnField().isMDropDownList(); } 
/*  1 */   protected boolean isMFileUpload() { return getColumnField().isMFileUpload(); } 
/*  1 */   protected boolean isMEditField() { return getColumnField().ismEditField(); } 
/*  1 */   protected long getMDefault() { return getColumnField().getMDefault(); } 
/*  1 */   protected long getMMax() { return getColumnField().getMMax(); } 
/*  1 */   protected long getMMin() { return getColumnField().getMMin(); } 
/*  1 */   protected boolean isMHaveDefault() { return getColumnField().isMHaveDefault(); } 
/*  1 */   protected boolean isMSpinner() { return getColumnField().isMSpinner(); } 
/*  1 */   protected int getMPrecision() { return getColumnField().getMPrecision(); } 
/*  1 */   protected int getMDateTimePopup() { return getColumnField().getMDateTimePopup(); } 
/*  1 */   protected String getMDefaultCode() { return getColumnField().getMDefaultCode(); } 
/*  1 */   protected String getMDefaultCurrency() { return getColumnField().getMDefaultCurrency(); } 
/*  1 */   protected CurrencyDetail[] getMAllowable() { return getColumnField().getMAllowable(); } 
/*  1 */   protected CurrencyDetail[] getMFunctional() { return getColumnField().getMFunctional(); } 
/*  1 */   protected String getMInitialCode() { return getColumnField().getMInitialCode(); } 
/*  1 */   protected int getMInitialState() { return getColumnField().getMInitialState(); } 
/*  1 */   protected int getMEnumType() { return getColumnField().getMEnumType(); } 
/*  1 */   protected String[] getMEnumLabels() { return getColumnField().getMEnumLabels(); } 
/*  1 */   protected String[] getMEnumValues() { return getColumnField().getMEnumValues(); } 
/*  1 */   protected SelectionFieldLimit getMEnumLimitInfo() { return getColumnField().getMEnumLimitInfo(); } 
/*  1 */   protected long[] getMEnumIds() { return getColumnField().getMEnumIds(); } 
/*  1 */   protected boolean isMIsCustom() { return getColumnField().isMIsCustom(); } 
/*  1 */   protected int getMEnumDefaultValue() { return getColumnField().getMEnumDefaultValue(); } 
/*  1 */   protected String getMRadioString() { return getColumnField().getMRadioString(); } 
/*  1 */   protected String getMLabelString() { return getColumnField().getMLabelString(); } 
/*  1 */   protected boolean isMImageFlat() { return getColumnField().isMImageFlat(); } 
/*  1 */   protected int getMControlType() { return getColumnField().getMControlType(); } 
/*  1 */   protected String getMHtmlColour() { return getColumnField().getMHtmlColour(); } 
/*  1 */   protected String getMColour() { return getColumnField().getMColour(); } 
/*  1 */   protected String getMFont() { return getColumnField().getMFont(); } 
/*  1 */   protected String getMButtonText() { return getColumnField().getMButtonText(); } 
/*  1 */   protected boolean isMTransparent() { return getColumnField().isMTransparent(); } 
/*  1 */   protected GoatImage getMImage() { return getColumnField().getMImage(); } 
/*  1 */   protected GoatImage getMDisabledImage() { return getColumnField().getMDisabledImage(); } 
/*  1 */   protected Value getMImageValue() { return getColumnField().getMImageValue(); } 
/*  1 */   protected Value getMDisabledImageValue() { return getColumnField().getMDisabledImageValue(); } 
/*  1 */   protected boolean isMImageMaintainRatio() { return getColumnField().isMImageMaintainRatio(); } 
/*  1 */   protected boolean isMScaleImageToFit() { return getColumnField().isMScaleImageToFit(); } 
/*  1 */   protected int getMImagePosition() { return getColumnField().getMImagePosition(); } 
/*  1 */   protected int getMTextJustify() { return getColumnField().getMTextJustify(); } 
/*  1 */   protected int getMTrimType() { return getColumnField().getMTrimType(); } 
/*  1 */   protected int getMEffect() { return getColumnField().getMEffect(); } 
/*  1 */   protected long getMLineWidth() { return getColumnField().getMLineWidth(); } 
/*  1 */   protected String getMBorderColor() { return getColumnField().getMBorderColor(); } 
/*  1 */   protected String getMBackgroundColor() { return getColumnField().getMBackgroundColor(); } 
/*  1 */   protected String getMHtmlTextColor() { return getColumnField().getMHtmlTextColor(); } 
/*  1 */   protected String getMTextColor() { return getColumnField().getMTextColor(); } 
/*  1 */   protected String getMTextFont() { return getColumnField().getMTextFont(); } 
/*  1 */   protected String getMTrimTextJustify() { return getColumnField().getMTrimTextJustify(); } 
/*  1 */   protected String getMTextVAlign() { return getColumnField().getMTextVAlign(); } 
/*  1 */   protected String getMText() { return getColumnField().getMText(); } 
/*  1 */   protected boolean isMButtonTBL() { return getColumnField().isMButtonTBL(); } 
/*  1 */   protected String getMScrollbars() { return getColumnField().getMScrollbars(); } 
/*  1 */   protected String getMBorder() { return getColumnField().getMBorder(); } 
/*  1 */   protected boolean isMIsGroupMenu() { return getColumnField().isMIsGroupMenu(); } 
/*  1 */   protected String getBackgroundColor(FieldGraph.Node arg0) { return getColumnField().getBackgroundColor(arg0); } 
/*  1 */   protected void setMAccess(int arg0) { getColumnField().setMAccess(arg0); } 
/*  1 */   protected void setMFont(String arg0) { getColumnField().setMFont(arg0); } 
/*  1 */   protected void setMColour(String arg0) { getColumnField().setMColour(arg0); } 
/*  1 */   protected String getARType(GoatField arg0) { return getColumnField().getARType(arg0); } 
/*  1 */   protected final Box[] placeQuadrants() { return getColumnField().placeQuadrants(); } 
/*  1 */   protected void setMEnumLimitInfo(SelectionFieldLimit arg0) { getColumnField().setMEnumLimitInfo(arg0); } 
/*  1 */   protected void setMIsCustom(boolean arg0) { getColumnField().setMIsCustom(arg0); } 
/*  1 */   protected void setMEnumValues(String[] arg0) { getColumnField().setMEnumValues(arg0); } 
/*  1 */   protected void setMEnumLabels(String[] arg0) { getColumnField().setMEnumLabels(arg0); } 
/*  1 */   protected void setMEnumIds(long[] arg0) { getColumnField().setMEnumIds(arg0); } 
/*  1 */   protected int idToIndex(long arg0) { return getColumnField().idToIndex(arg0); } 
/*  1 */   protected void setMLabelString(String arg0) { getColumnField().setMLabelString(arg0); } 
/*  1 */   protected void setMEnumType(int arg0) { getColumnField().setMEnumType(arg0); } 
/*  1 */   protected void setMRows(long arg0) { getColumnField().setMRows(arg0); } 
/*  1 */   protected void setMEnumDefaultValue(int arg0) { getColumnField().setMEnumDefaultValue(arg0); } 
/*  1 */   protected String getDisplayTitleCodeForField(GoatField arg0) { return getColumnField().getDisplayTitleCodeForField(arg0); } 
/*  1 */   protected String getDisplayTitleForField(GoatField arg0) { return getColumnField().getDisplayTitleForField(arg0); } 
/*  1 */   protected void setMPrecision(int arg0) { getColumnField().setMPrecision(arg0); } 
/*  1 */   protected void setMFunctional(CurrencyDetail[] arg0) { getColumnField().setMFunctional(arg0); } 
/*  1 */   protected void setMAllowable(CurrencyDetail[] arg0) { getColumnField().setMAllowable(arg0); } 
/*  1 */   protected void setMDefaultCurrency(String arg0) { getColumnField().setMDefaultCurrency(arg0); } 
/*  1 */   protected void setMDefaultCode(String arg0) { getColumnField().setMDefaultCode(arg0); } 
/*  1 */   protected void setMHaveDefault(boolean arg0) { getColumnField().setMHaveDefault(arg0); } 
/*  1 */   protected void setMMin(long arg0) { getColumnField().setMMin(arg0); } 
/*  1 */   protected void setMMax(long arg0) { getColumnField().setMMax(arg0); } 
/*  1 */   protected void setMDefault(long arg0) { getColumnField().setMDefault(arg0); } 
/*  1 */   protected void setMMenuStyle(int arg0) { getColumnField().setMMenuStyle(arg0); } 
/*  1 */   protected void setMMasked(boolean arg0) { getColumnField().setMMasked(arg0); } 
/*  1 */   protected void setMMaxLength(int arg0) { getColumnField().setMMaxLength(arg0); } 
/*  1 */   protected void setMQBEMatch(int arg0) { getColumnField().setMQBEMatch(arg0); } 
/*  1 */   protected void setMCharMenu(String arg0) { getColumnField().setMCharMenu(arg0); } 
/*  1 */   protected void setMCharPattern(String arg0) { getColumnField().setMCharPattern(arg0); } 
/*  1 */   protected void setMFullTextOption(int arg0) { getColumnField().setMFullTextOption(arg0); } 
/*  1 */   protected void setMIsGroupMenu(boolean arg0) { getColumnField().setMIsGroupMenu(arg0); } 
/*  1 */   protected String getForCodePrefix_DataField(GoatField arg0) { return getColumnField().getForCodePrefix_DataField(arg0); } 
/*  1 */   protected String getExpandBoxClassesString() { if (isMRichTextField()) return getRichTextEditorClassString(); if (isMFileUpload()) return getFileUploadClassString(); if (isMEditField()) return getEditFieldClassString(); return getColumnField().getExpandBoxClassesString(); } 
/*  1 */   protected GoatImageButton getFileUploadButton() { return getColumnField().getFileUploadButton(); } 
/*  1 */   protected GoatImageButton getRichTextEditorButton() { return getColumnField().getRichTextEditorButton(); } 
/*  1 */   protected String getMImgButtonAltText() { return getColumnField().getMImgButtonAltText(); } 
/*  1 */   protected String getFileUploadClassString() { return getColumnField().getFileUploadClassString(); } 
/*  1 */   protected String getEditFieldClassString() { return getColumnField().getEditFieldClassString(); } 
/*  1 */   protected GoatImageButton getExpandButton(GoatField arg0) { if (isMRichTextField()) return getColumnField().getRichTextEditorButton(); if ((isMShowURL()) && (getMDisplayType() != 3)) { getColumnField().setmEditField(true); return getColumnField().getMDefaultEditButton(); } return getColumnField().getExpandButton(arg0); } 
/*  1 */   private boolean isMShowURL() { return getColumnField().isMShowURL(); } 
/*  1 */   protected int getMAttachmentFieldID() { return getColumnField().getMAttachmentFieldID(); } 
/*  1 */   protected String getExpandBoxAltText(GoatField arg0) { return getColumnField().getExpandBoxAltText(arg0); } 
/*  1 */   protected Value getMImgColValue() { return getColumnField().getMImgColValue(); } 
/*  1 */   public String getMTableCellColorString() { return getColumnField().getMTableCellColorString(); } 
/*  1 */   protected Map<Integer, GoatImage> cacheImgCols(Value arg0) { return getColumnField().cacheImgCols(arg0); } 
/*  1 */   protected String getRichTextEditorClassString() { return getColumnField().getRichTextEditorClassString(); } 
/*  1 */   protected String getMAltText() { return getColumnField().getMAltText(); } 
/*  1 */   protected int getMHeaderAlignment(FieldGraph.Node arg0) { return getColumnField().getMHeaderAlignment(arg0); } 
/*  1 */   protected int getMDataAlignment(FieldGraph.Node arg0) { return getColumnField().getMDataAlignment(arg0); } 
/*  1 */   protected int getMImgBtnMouseoverEffect() { return getColumnField().getMImgBtnMouseoverEffect(); }
/*    */ 
/*    */ }

/* Location:           D:\temp\原来桌面的\webapps\midtier_hpia32\WEB-INF\lib\MidTier.jar
 * Qualified Name:     com.remedy.arsys.goat.field.emit.html.ColumnFieldEmitter
 * JD-Core Version:    0.6.1
 */